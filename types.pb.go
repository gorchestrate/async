// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

package async

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Workflow_Status int32

const (
	Workflow_Invalid  Workflow_Status = 0
	Workflow_Started  Workflow_Status = 1
	Workflow_Running  Workflow_Status = 2
	Workflow_Finished Workflow_Status = 3
)

var Workflow_Status_name = map[int32]string{
	0: "Invalid",
	1: "Started",
	2: "Running",
	3: "Finished",
}

var Workflow_Status_value = map[string]int32{
	"Invalid":  0,
	"Started":  1,
	"Running":  2,
	"Finished": 3,
}

func (x Workflow_Status) String() string {
	return proto.EnumName(Workflow_Status_name, int32(x))
}

func (Workflow_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1, 0}
}

type Thread_Status int32

const (
	Thread_Invalid   Thread_Status = 0
	Thread_Blocked   Thread_Status = 1
	Thread_Unblocked Thread_Status = 2
	Thread_Aborted   Thread_Status = 3
)

var Thread_Status_name = map[int32]string{
	0: "Invalid",
	1: "Blocked",
	2: "Unblocked",
	3: "Aborted",
}

var Thread_Status_value = map[string]int32{
	"Invalid":   0,
	"Blocked":   1,
	"Unblocked": 2,
	"Aborted":   3,
}

func (x Thread_Status) String() string {
	return proto.EnumName(Thread_Status_name, int32(x))
}

func (Thread_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2, 0}
}

type Select_Result int32

const (
	Select_Invalid Select_Result = 0
	Select_OK      Select_Result = 1
	Select_Closed  Select_Result = 2
)

var Select_Result_name = map[int32]string{
	0: "Invalid",
	1: "OK",
	2: "Closed",
}

var Select_Result_value = map[string]int32{
	"Invalid": 0,
	"OK":      1,
	"Closed":  2,
}

func (x Select_Result) String() string {
	return proto.EnumName(Select_Result_name, int32(x))
}

func (Select_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{6, 0}
}

type Case_Op int32

const (
	Case_Invalid Case_Op = 0
	Case_Send    Case_Op = 1
	Case_Recv    Case_Op = 2
	Case_Time    Case_Op = 3
	Case_Default Case_Op = 5
)

var Case_Op_name = map[int32]string{
	0: "Invalid",
	1: "Send",
	2: "Recv",
	3: "Time",
	5: "Default",
}

var Case_Op_value = map[string]int32{
	"Invalid": 0,
	"Send":    1,
	"Recv":    2,
	"Time":    3,
	"Default": 5,
}

func (x Case_Op) String() string {
	return proto.EnumName(Case_Op_name, int32(x))
}

func (Case_Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{7, 0}
}

type WorkflowAPI struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Service              string   `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Input                string   `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Output               string   `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	State                string   `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowAPI) Reset()         { *m = WorkflowAPI{} }
func (m *WorkflowAPI) String() string { return proto.CompactTextString(m) }
func (*WorkflowAPI) ProtoMessage()    {}
func (*WorkflowAPI) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}

func (m *WorkflowAPI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowAPI.Unmarshal(m, b)
}
func (m *WorkflowAPI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowAPI.Marshal(b, m, deterministic)
}
func (m *WorkflowAPI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowAPI.Merge(m, src)
}
func (m *WorkflowAPI) XXX_Size() int {
	return xxx_messageInfo_WorkflowAPI.Size(m)
}
func (m *WorkflowAPI) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowAPI.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowAPI proto.InternalMessageInfo

func (m *WorkflowAPI) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WorkflowAPI) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *WorkflowAPI) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *WorkflowAPI) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *WorkflowAPI) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *WorkflowAPI) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type Workflow struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Service              string          `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Status               Workflow_Status `protobuf:"varint,4,opt,name=status,proto3,enum=core.Workflow_Status" json:"status,omitempty"`
	Threads              []*Thread       `protobuf:"bytes,5,rep,name=threads,proto3" json:"threads,omitempty"`
	State                []byte          `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Input                []byte          `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`
	Output               []byte          `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
	Version              uint64          `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	UpdatedAt            uint64          `protobuf:"varint,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Workflow) Reset()         { *m = Workflow{} }
func (m *Workflow) String() string { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()    {}
func (*Workflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}

func (m *Workflow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Workflow.Unmarshal(m, b)
}
func (m *Workflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Workflow.Marshal(b, m, deterministic)
}
func (m *Workflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow.Merge(m, src)
}
func (m *Workflow) XXX_Size() int {
	return xxx_messageInfo_Workflow.Size(m)
}
func (m *Workflow) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow proto.InternalMessageInfo

func (m *Workflow) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Workflow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Workflow) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Workflow) GetStatus() Workflow_Status {
	if m != nil {
		return m.Status
	}
	return Workflow_Invalid
}

func (m *Workflow) GetThreads() []*Thread {
	if m != nil {
		return m.Threads
	}
	return nil
}

func (m *Workflow) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Workflow) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Workflow) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Workflow) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Workflow) GetUpdatedAt() uint64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type Thread struct {
	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Workflow    string        `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Service     string        `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	Status      Thread_Status `protobuf:"varint,6,opt,name=status,proto3,enum=core.Thread_Status" json:"status,omitempty"`
	Select      *Select       `protobuf:"bytes,5,opt,name=select,proto3" json:"select,omitempty"`
	Call        *Call         `protobuf:"bytes,12,opt,name=call,proto3" json:"call,omitempty"`
	BlockedAt   uint64        `protobuf:"varint,8,opt,name=blockedAt,proto3" json:"blockedAt,omitempty"`
	UnblockedAt uint64        `protobuf:"varint,9,opt,name=unblockedAt,proto3" json:"unblockedAt,omitempty"`
	// filled after unblocked
	ToStatus             string   `protobuf:"bytes,13,opt,name=toStatus,proto3" json:"toStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Thread) Reset()         { *m = Thread{} }
func (m *Thread) String() string { return proto.CompactTextString(m) }
func (*Thread) ProtoMessage()    {}
func (*Thread) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2}
}

func (m *Thread) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Thread.Unmarshal(m, b)
}
func (m *Thread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Thread.Marshal(b, m, deterministic)
}
func (m *Thread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thread.Merge(m, src)
}
func (m *Thread) XXX_Size() int {
	return xxx_messageInfo_Thread.Size(m)
}
func (m *Thread) XXX_DiscardUnknown() {
	xxx_messageInfo_Thread.DiscardUnknown(m)
}

var xxx_messageInfo_Thread proto.InternalMessageInfo

func (m *Thread) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Thread) GetWorkflow() string {
	if m != nil {
		return m.Workflow
	}
	return ""
}

func (m *Thread) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Thread) GetStatus() Thread_Status {
	if m != nil {
		return m.Status
	}
	return Thread_Invalid
}

func (m *Thread) GetSelect() *Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *Thread) GetCall() *Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (m *Thread) GetBlockedAt() uint64 {
	if m != nil {
		return m.BlockedAt
	}
	return 0
}

func (m *Thread) GetUnblockedAt() uint64 {
	if m != nil {
		return m.UnblockedAt
	}
	return 0
}

func (m *Thread) GetToStatus() string {
	if m != nil {
		return m.ToStatus
	}
	return ""
}

type Type struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	JsonSchema           []byte   `protobuf:"bytes,3,opt,name=jsonSchema,proto3" json:"jsonSchema,omitempty"`
	Version              uint64   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Type) Reset()         { *m = Type{} }
func (m *Type) String() string { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()    {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{3}
}

func (m *Type) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Type.Unmarshal(m, b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Type.Marshal(b, m, deterministic)
}
func (m *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(m, src)
}
func (m *Type) XXX_Size() int {
	return xxx_messageInfo_Type.Size(m)
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

func (m *Type) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Type) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Type) GetJsonSchema() []byte {
	if m != nil {
		return m.JsonSchema
	}
	return nil
}

func (m *Type) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// Create new workflow using template
type NewWorkflowReq struct {
	Call                 *Call    `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewWorkflowReq) Reset()         { *m = NewWorkflowReq{} }
func (m *NewWorkflowReq) String() string { return proto.CompactTextString(m) }
func (*NewWorkflowReq) ProtoMessage()    {}
func (*NewWorkflowReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{4}
}

func (m *NewWorkflowReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewWorkflowReq.Unmarshal(m, b)
}
func (m *NewWorkflowReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewWorkflowReq.Marshal(b, m, deterministic)
}
func (m *NewWorkflowReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewWorkflowReq.Merge(m, src)
}
func (m *NewWorkflowReq) XXX_Size() int {
	return xxx_messageInfo_NewWorkflowReq.Size(m)
}
func (m *NewWorkflowReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NewWorkflowReq.DiscardUnknown(m)
}

var xxx_messageInfo_NewWorkflowReq proto.InternalMessageInfo

func (m *NewWorkflowReq) GetCall() *Call {
	if m != nil {
		return m.Call
	}
	return nil
}

// Update existing workflow
type UpdateWorkflowReq struct {
	Workflow             *Workflow `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	LockId               uint64    `protobuf:"varint,2,opt,name=lockId,proto3" json:"lockId,omitempty"`
	UnblockedAt          uint64    `protobuf:"varint,3,opt,name=unblockedAt,proto3" json:"unblockedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateWorkflowReq) Reset()         { *m = UpdateWorkflowReq{} }
func (m *UpdateWorkflowReq) String() string { return proto.CompactTextString(m) }
func (*UpdateWorkflowReq) ProtoMessage()    {}
func (*UpdateWorkflowReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{5}
}

func (m *UpdateWorkflowReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateWorkflowReq.Unmarshal(m, b)
}
func (m *UpdateWorkflowReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateWorkflowReq.Marshal(b, m, deterministic)
}
func (m *UpdateWorkflowReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWorkflowReq.Merge(m, src)
}
func (m *UpdateWorkflowReq) XXX_Size() int {
	return xxx_messageInfo_UpdateWorkflowReq.Size(m)
}
func (m *UpdateWorkflowReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWorkflowReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWorkflowReq proto.InternalMessageInfo

func (m *UpdateWorkflowReq) GetWorkflow() *Workflow {
	if m != nil {
		return m.Workflow
	}
	return nil
}

func (m *UpdateWorkflowReq) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

func (m *UpdateWorkflowReq) GetUnblockedAt() uint64 {
	if m != nil {
		return m.UnblockedAt
	}
	return 0
}

type Select struct {
	Cases []*Case `protobuf:"bytes,1,rep,name=cases,proto3" json:"cases,omitempty"`
	// filled after unblocked
	UnblockedCase        uint64        `protobuf:"varint,2,opt,name=unblockedCase,proto3" json:"unblockedCase,omitempty"`
	RecvData             []byte        `protobuf:"bytes,3,opt,name=recvData,proto3" json:"recvData,omitempty"`
	Result               Select_Result `protobuf:"varint,4,opt,name=result,proto3,enum=core.Select_Result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Select) Reset()         { *m = Select{} }
func (m *Select) String() string { return proto.CompactTextString(m) }
func (*Select) ProtoMessage()    {}
func (*Select) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{6}
}

func (m *Select) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Select.Unmarshal(m, b)
}
func (m *Select) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Select.Marshal(b, m, deterministic)
}
func (m *Select) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Select.Merge(m, src)
}
func (m *Select) XXX_Size() int {
	return xxx_messageInfo_Select.Size(m)
}
func (m *Select) XXX_DiscardUnknown() {
	xxx_messageInfo_Select.DiscardUnknown(m)
}

var xxx_messageInfo_Select proto.InternalMessageInfo

func (m *Select) GetCases() []*Case {
	if m != nil {
		return m.Cases
	}
	return nil
}

func (m *Select) GetUnblockedCase() uint64 {
	if m != nil {
		return m.UnblockedCase
	}
	return 0
}

func (m *Select) GetRecvData() []byte {
	if m != nil {
		return m.RecvData
	}
	return nil
}

func (m *Select) GetResult() Select_Result {
	if m != nil {
		return m.Result
	}
	return Select_Invalid
}

type Case struct {
	ToStatus             string   `protobuf:"bytes,1,opt,name=toStatus,proto3" json:"toStatus,omitempty"`
	Op                   Case_Op  `protobuf:"varint,2,opt,name=op,proto3,enum=core.Case_Op" json:"op,omitempty"`
	Chan                 string   `protobuf:"bytes,3,opt,name=chan,proto3" json:"chan,omitempty"`
	Time                 uint64   `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	DataType             string   `protobuf:"bytes,6,opt,name=dataType,proto3" json:"dataType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Case) Reset()         { *m = Case{} }
func (m *Case) String() string { return proto.CompactTextString(m) }
func (*Case) ProtoMessage()    {}
func (*Case) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{7}
}

func (m *Case) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Case.Unmarshal(m, b)
}
func (m *Case) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Case.Marshal(b, m, deterministic)
}
func (m *Case) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Case.Merge(m, src)
}
func (m *Case) XXX_Size() int {
	return xxx_messageInfo_Case.Size(m)
}
func (m *Case) XXX_DiscardUnknown() {
	xxx_messageInfo_Case.DiscardUnknown(m)
}

var xxx_messageInfo_Case proto.InternalMessageInfo

func (m *Case) GetToStatus() string {
	if m != nil {
		return m.ToStatus
	}
	return ""
}

func (m *Case) GetOp() Case_Op {
	if m != nil {
		return m.Op
	}
	return Case_Invalid
}

func (m *Case) GetChan() string {
	if m != nil {
		return m.Chan
	}
	return ""
}

func (m *Case) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Case) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Case) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

type Call struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Input      []byte `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	InputType  string `protobuf:"bytes,4,opt,name=inputType,proto3" json:"inputType,omitempty"`
	OutputType string `protobuf:"bytes,5,opt,name=outputType,proto3" json:"outputType,omitempty"`
	// filled after unblocked
	Output               []byte   `protobuf:"bytes,6,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Call) Reset()         { *m = Call{} }
func (m *Call) String() string { return proto.CompactTextString(m) }
func (*Call) ProtoMessage()    {}
func (*Call) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{8}
}

func (m *Call) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Call.Unmarshal(m, b)
}
func (m *Call) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Call.Marshal(b, m, deterministic)
}
func (m *Call) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Call.Merge(m, src)
}
func (m *Call) XXX_Size() int {
	return xxx_messageInfo_Call.Size(m)
}
func (m *Call) XXX_DiscardUnknown() {
	xxx_messageInfo_Call.DiscardUnknown(m)
}

var xxx_messageInfo_Call proto.InternalMessageInfo

func (m *Call) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Call) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Call) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Call) GetInputType() string {
	if m != nil {
		return m.InputType
	}
	return ""
}

func (m *Call) GetOutputType() string {
	if m != nil {
		return m.OutputType
	}
	return ""
}

func (m *Call) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

type Channel struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DataType             string   `protobuf:"bytes,2,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Closed               bool     `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	BufSize              uint64   `protobuf:"varint,4,opt,name=bufSize,proto3" json:"bufSize,omitempty"`
	BufMaxSize           uint64   `protobuf:"varint,5,opt,name=bufMaxSize,proto3" json:"bufMaxSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{9}
}

func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Channel) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *Channel) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

func (m *Channel) GetBufSize() uint64 {
	if m != nil {
		return m.BufSize
	}
	return 0
}

func (m *Channel) GetBufMaxSize() uint64 {
	if m != nil {
		return m.BufMaxSize
	}
	return 0
}

type ChanSelect struct {
	BlockedAt            uint64   `protobuf:"varint,1,opt,name=blockedAt,proto3" json:"blockedAt,omitempty"`
	Case                 uint64   `protobuf:"varint,2,opt,name=case,proto3" json:"case,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChanSelect) Reset()         { *m = ChanSelect{} }
func (m *ChanSelect) String() string { return proto.CompactTextString(m) }
func (*ChanSelect) ProtoMessage()    {}
func (*ChanSelect) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{10}
}

func (m *ChanSelect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChanSelect.Unmarshal(m, b)
}
func (m *ChanSelect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChanSelect.Marshal(b, m, deterministic)
}
func (m *ChanSelect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChanSelect.Merge(m, src)
}
func (m *ChanSelect) XXX_Size() int {
	return xxx_messageInfo_ChanSelect.Size(m)
}
func (m *ChanSelect) XXX_DiscardUnknown() {
	xxx_messageInfo_ChanSelect.DiscardUnknown(m)
}

var xxx_messageInfo_ChanSelect proto.InternalMessageInfo

func (m *ChanSelect) GetBlockedAt() uint64 {
	if m != nil {
		return m.BlockedAt
	}
	return 0
}

func (m *ChanSelect) GetCase() uint64 {
	if m != nil {
		return m.Case
	}
	return 0
}

type WaitCallIndex struct {
	BlockedAt            uint64   `protobuf:"varint,1,opt,name=blockedAt,proto3" json:"blockedAt,omitempty"`
	WorkflowsId          string   `protobuf:"bytes,2,opt,name=workflowsId,proto3" json:"workflowsId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitCallIndex) Reset()         { *m = WaitCallIndex{} }
func (m *WaitCallIndex) String() string { return proto.CompactTextString(m) }
func (*WaitCallIndex) ProtoMessage()    {}
func (*WaitCallIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{11}
}

func (m *WaitCallIndex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitCallIndex.Unmarshal(m, b)
}
func (m *WaitCallIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitCallIndex.Marshal(b, m, deterministic)
}
func (m *WaitCallIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitCallIndex.Merge(m, src)
}
func (m *WaitCallIndex) XXX_Size() int {
	return xxx_messageInfo_WaitCallIndex.Size(m)
}
func (m *WaitCallIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitCallIndex.DiscardUnknown(m)
}

var xxx_messageInfo_WaitCallIndex proto.InternalMessageInfo

func (m *WaitCallIndex) GetBlockedAt() uint64 {
	if m != nil {
		return m.BlockedAt
	}
	return 0
}

func (m *WaitCallIndex) GetWorkflowsId() string {
	if m != nil {
		return m.WorkflowsId
	}
	return ""
}

type BufData struct {
	//string Workflow     = 1;
	//string Select    = 2;
	//string Group     = 3;
	//string ToStatus  = 4;
	Chan                 string   `protobuf:"bytes,1,opt,name=Chan,proto3" json:"Chan,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	Clock                uint64   `protobuf:"varint,6,opt,name=clock,proto3" json:"clock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BufData) Reset()         { *m = BufData{} }
func (m *BufData) String() string { return proto.CompactTextString(m) }
func (*BufData) ProtoMessage()    {}
func (*BufData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{12}
}

func (m *BufData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BufData.Unmarshal(m, b)
}
func (m *BufData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BufData.Marshal(b, m, deterministic)
}
func (m *BufData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufData.Merge(m, src)
}
func (m *BufData) XXX_Size() int {
	return xxx_messageInfo_BufData.Size(m)
}
func (m *BufData) XXX_DiscardUnknown() {
	xxx_messageInfo_BufData.DiscardUnknown(m)
}

var xxx_messageInfo_BufData proto.InternalMessageInfo

func (m *BufData) GetChan() string {
	if m != nil {
		return m.Chan
	}
	return ""
}

func (m *BufData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BufData) GetClock() uint64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{13}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type RegisterWorkflowHandlerReq struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Pool                 int64    `protobuf:"varint,2,opt,name=pool,proto3" json:"pool,omitempty"`
	PollIntervalMs       int64    `protobuf:"varint,3,opt,name=pollIntervalMs,proto3" json:"pollIntervalMs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterWorkflowHandlerReq) Reset()         { *m = RegisterWorkflowHandlerReq{} }
func (m *RegisterWorkflowHandlerReq) String() string { return proto.CompactTextString(m) }
func (*RegisterWorkflowHandlerReq) ProtoMessage()    {}
func (*RegisterWorkflowHandlerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{14}
}

func (m *RegisterWorkflowHandlerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterWorkflowHandlerReq.Unmarshal(m, b)
}
func (m *RegisterWorkflowHandlerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterWorkflowHandlerReq.Marshal(b, m, deterministic)
}
func (m *RegisterWorkflowHandlerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterWorkflowHandlerReq.Merge(m, src)
}
func (m *RegisterWorkflowHandlerReq) XXX_Size() int {
	return xxx_messageInfo_RegisterWorkflowHandlerReq.Size(m)
}
func (m *RegisterWorkflowHandlerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterWorkflowHandlerReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterWorkflowHandlerReq proto.InternalMessageInfo

func (m *RegisterWorkflowHandlerReq) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *RegisterWorkflowHandlerReq) GetPool() int64 {
	if m != nil {
		return m.Pool
	}
	return 0
}

func (m *RegisterWorkflowHandlerReq) GetPollIntervalMs() int64 {
	if m != nil {
		return m.PollIntervalMs
	}
	return 0
}

type LockedWorkflow struct {
	Workflow             *Workflow `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Thread               *Thread   `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
	LockId               uint64    `protobuf:"varint,3,opt,name=lockId,proto3" json:"lockId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LockedWorkflow) Reset()         { *m = LockedWorkflow{} }
func (m *LockedWorkflow) String() string { return proto.CompactTextString(m) }
func (*LockedWorkflow) ProtoMessage()    {}
func (*LockedWorkflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{15}
}

func (m *LockedWorkflow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockedWorkflow.Unmarshal(m, b)
}
func (m *LockedWorkflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockedWorkflow.Marshal(b, m, deterministic)
}
func (m *LockedWorkflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedWorkflow.Merge(m, src)
}
func (m *LockedWorkflow) XXX_Size() int {
	return xxx_messageInfo_LockedWorkflow.Size(m)
}
func (m *LockedWorkflow) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedWorkflow.DiscardUnknown(m)
}

var xxx_messageInfo_LockedWorkflow proto.InternalMessageInfo

func (m *LockedWorkflow) GetWorkflow() *Workflow {
	if m != nil {
		return m.Workflow
	}
	return nil
}

func (m *LockedWorkflow) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

func (m *LockedWorkflow) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

type MakeChanReq struct {
	Chan                 *Channel `protobuf:"bytes,1,opt,name=chan,proto3" json:"chan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MakeChanReq) Reset()         { *m = MakeChanReq{} }
func (m *MakeChanReq) String() string { return proto.CompactTextString(m) }
func (*MakeChanReq) ProtoMessage()    {}
func (*MakeChanReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{16}
}

func (m *MakeChanReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MakeChanReq.Unmarshal(m, b)
}
func (m *MakeChanReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MakeChanReq.Marshal(b, m, deterministic)
}
func (m *MakeChanReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MakeChanReq.Merge(m, src)
}
func (m *MakeChanReq) XXX_Size() int {
	return xxx_messageInfo_MakeChanReq.Size(m)
}
func (m *MakeChanReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MakeChanReq.DiscardUnknown(m)
}

var xxx_messageInfo_MakeChanReq proto.InternalMessageInfo

func (m *MakeChanReq) GetChan() *Channel {
	if m != nil {
		return m.Chan
	}
	return nil
}

type CloseChanReq struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseChanReq) Reset()         { *m = CloseChanReq{} }
func (m *CloseChanReq) String() string { return proto.CompactTextString(m) }
func (*CloseChanReq) ProtoMessage()    {}
func (*CloseChanReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{17}
}

func (m *CloseChanReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseChanReq.Unmarshal(m, b)
}
func (m *CloseChanReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseChanReq.Marshal(b, m, deterministic)
}
func (m *CloseChanReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseChanReq.Merge(m, src)
}
func (m *CloseChanReq) XXX_Size() int {
	return xxx_messageInfo_CloseChanReq.Size(m)
}
func (m *CloseChanReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseChanReq.DiscardUnknown(m)
}

var xxx_messageInfo_CloseChanReq proto.InternalMessageInfo

func (m *CloseChanReq) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type DeleteChanReq struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteChanReq) Reset()         { *m = DeleteChanReq{} }
func (m *DeleteChanReq) String() string { return proto.CompactTextString(m) }
func (*DeleteChanReq) ProtoMessage()    {}
func (*DeleteChanReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{18}
}

func (m *DeleteChanReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteChanReq.Unmarshal(m, b)
}
func (m *DeleteChanReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteChanReq.Marshal(b, m, deterministic)
}
func (m *DeleteChanReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteChanReq.Merge(m, src)
}
func (m *DeleteChanReq) XXX_Size() int {
	return xxx_messageInfo_DeleteChanReq.Size(m)
}
func (m *DeleteChanReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteChanReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteChanReq proto.InternalMessageInfo

func (m *DeleteChanReq) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ListChansReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Limit                uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListChansReq) Reset()         { *m = ListChansReq{} }
func (m *ListChansReq) String() string { return proto.CompactTextString(m) }
func (*ListChansReq) ProtoMessage()    {}
func (*ListChansReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{19}
}

func (m *ListChansReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListChansReq.Unmarshal(m, b)
}
func (m *ListChansReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListChansReq.Marshal(b, m, deterministic)
}
func (m *ListChansReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChansReq.Merge(m, src)
}
func (m *ListChansReq) XXX_Size() int {
	return xxx_messageInfo_ListChansReq.Size(m)
}
func (m *ListChansReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChansReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListChansReq proto.InternalMessageInfo

func (m *ListChansReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ListChansReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ListChansReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListChansResp struct {
	Chans                []*Channel `protobuf:"bytes,1,rep,name=chans,proto3" json:"chans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListChansResp) Reset()         { *m = ListChansResp{} }
func (m *ListChansResp) String() string { return proto.CompactTextString(m) }
func (*ListChansResp) ProtoMessage()    {}
func (*ListChansResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{20}
}

func (m *ListChansResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListChansResp.Unmarshal(m, b)
}
func (m *ListChansResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListChansResp.Marshal(b, m, deterministic)
}
func (m *ListChansResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChansResp.Merge(m, src)
}
func (m *ListChansResp) XXX_Size() int {
	return xxx_messageInfo_ListChansResp.Size(m)
}
func (m *ListChansResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChansResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListChansResp proto.InternalMessageInfo

func (m *ListChansResp) GetChans() []*Channel {
	if m != nil {
		return m.Chans
	}
	return nil
}

type ListTypesReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Limit                uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTypesReq) Reset()         { *m = ListTypesReq{} }
func (m *ListTypesReq) String() string { return proto.CompactTextString(m) }
func (*ListTypesReq) ProtoMessage()    {}
func (*ListTypesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{21}
}

func (m *ListTypesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTypesReq.Unmarshal(m, b)
}
func (m *ListTypesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTypesReq.Marshal(b, m, deterministic)
}
func (m *ListTypesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTypesReq.Merge(m, src)
}
func (m *ListTypesReq) XXX_Size() int {
	return xxx_messageInfo_ListTypesReq.Size(m)
}
func (m *ListTypesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTypesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListTypesReq proto.InternalMessageInfo

func (m *ListTypesReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ListTypesReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ListTypesReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListTypesResp struct {
	Types                []*Type  `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTypesResp) Reset()         { *m = ListTypesResp{} }
func (m *ListTypesResp) String() string { return proto.CompactTextString(m) }
func (*ListTypesResp) ProtoMessage()    {}
func (*ListTypesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{22}
}

func (m *ListTypesResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTypesResp.Unmarshal(m, b)
}
func (m *ListTypesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTypesResp.Marshal(b, m, deterministic)
}
func (m *ListTypesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTypesResp.Merge(m, src)
}
func (m *ListTypesResp) XXX_Size() int {
	return xxx_messageInfo_ListTypesResp.Size(m)
}
func (m *ListTypesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTypesResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListTypesResp proto.InternalMessageInfo

func (m *ListTypesResp) GetTypes() []*Type {
	if m != nil {
		return m.Types
	}
	return nil
}

type ListAPIsReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Limit                uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAPIsReq) Reset()         { *m = ListAPIsReq{} }
func (m *ListAPIsReq) String() string { return proto.CompactTextString(m) }
func (*ListAPIsReq) ProtoMessage()    {}
func (*ListAPIsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{23}
}

func (m *ListAPIsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAPIsReq.Unmarshal(m, b)
}
func (m *ListAPIsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAPIsReq.Marshal(b, m, deterministic)
}
func (m *ListAPIsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAPIsReq.Merge(m, src)
}
func (m *ListAPIsReq) XXX_Size() int {
	return xxx_messageInfo_ListAPIsReq.Size(m)
}
func (m *ListAPIsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAPIsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListAPIsReq proto.InternalMessageInfo

func (m *ListAPIsReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ListAPIsReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ListAPIsReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListAPIsResp struct {
	Apis                 []*WorkflowAPI `protobuf:"bytes,1,rep,name=apis,proto3" json:"apis,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListAPIsResp) Reset()         { *m = ListAPIsResp{} }
func (m *ListAPIsResp) String() string { return proto.CompactTextString(m) }
func (*ListAPIsResp) ProtoMessage()    {}
func (*ListAPIsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{24}
}

func (m *ListAPIsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAPIsResp.Unmarshal(m, b)
}
func (m *ListAPIsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAPIsResp.Marshal(b, m, deterministic)
}
func (m *ListAPIsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAPIsResp.Merge(m, src)
}
func (m *ListAPIsResp) XXX_Size() int {
	return xxx_messageInfo_ListAPIsResp.Size(m)
}
func (m *ListAPIsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAPIsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListAPIsResp proto.InternalMessageInfo

func (m *ListAPIsResp) GetApis() []*WorkflowAPI {
	if m != nil {
		return m.Apis
	}
	return nil
}

type GetWorkflowReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkflowReq) Reset()         { *m = GetWorkflowReq{} }
func (m *GetWorkflowReq) String() string { return proto.CompactTextString(m) }
func (*GetWorkflowReq) ProtoMessage()    {}
func (*GetWorkflowReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{25}
}

func (m *GetWorkflowReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkflowReq.Unmarshal(m, b)
}
func (m *GetWorkflowReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkflowReq.Marshal(b, m, deterministic)
}
func (m *GetWorkflowReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowReq.Merge(m, src)
}
func (m *GetWorkflowReq) XXX_Size() int {
	return xxx_messageInfo_GetWorkflowReq.Size(m)
}
func (m *GetWorkflowReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowReq proto.InternalMessageInfo

func (m *GetWorkflowReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type LockWorkflowReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockWorkflowReq) Reset()         { *m = LockWorkflowReq{} }
func (m *LockWorkflowReq) String() string { return proto.CompactTextString(m) }
func (*LockWorkflowReq) ProtoMessage()    {}
func (*LockWorkflowReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{26}
}

func (m *LockWorkflowReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockWorkflowReq.Unmarshal(m, b)
}
func (m *LockWorkflowReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockWorkflowReq.Marshal(b, m, deterministic)
}
func (m *LockWorkflowReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockWorkflowReq.Merge(m, src)
}
func (m *LockWorkflowReq) XXX_Size() int {
	return xxx_messageInfo_LockWorkflowReq.Size(m)
}
func (m *LockWorkflowReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LockWorkflowReq.DiscardUnknown(m)
}

var xxx_messageInfo_LockWorkflowReq proto.InternalMessageInfo

func (m *LockWorkflowReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListenWorkflowsUpdatesReq struct {
	From                 uint64   `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	Filter               string   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenWorkflowsUpdatesReq) Reset()         { *m = ListenWorkflowsUpdatesReq{} }
func (m *ListenWorkflowsUpdatesReq) String() string { return proto.CompactTextString(m) }
func (*ListenWorkflowsUpdatesReq) ProtoMessage()    {}
func (*ListenWorkflowsUpdatesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{27}
}

func (m *ListenWorkflowsUpdatesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenWorkflowsUpdatesReq.Unmarshal(m, b)
}
func (m *ListenWorkflowsUpdatesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenWorkflowsUpdatesReq.Marshal(b, m, deterministic)
}
func (m *ListenWorkflowsUpdatesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenWorkflowsUpdatesReq.Merge(m, src)
}
func (m *ListenWorkflowsUpdatesReq) XXX_Size() int {
	return xxx_messageInfo_ListenWorkflowsUpdatesReq.Size(m)
}
func (m *ListenWorkflowsUpdatesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenWorkflowsUpdatesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListenWorkflowsUpdatesReq proto.InternalMessageInfo

func (m *ListenWorkflowsUpdatesReq) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *ListenWorkflowsUpdatesReq) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type FindWorkflowsReq struct {
	From                 uint64   `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   uint64   `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Limit                uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Scanlimit            uint64   `protobuf:"varint,5,opt,name=scanlimit,proto3" json:"scanlimit,omitempty"`
	Filter               string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindWorkflowsReq) Reset()         { *m = FindWorkflowsReq{} }
func (m *FindWorkflowsReq) String() string { return proto.CompactTextString(m) }
func (*FindWorkflowsReq) ProtoMessage()    {}
func (*FindWorkflowsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{28}
}

func (m *FindWorkflowsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindWorkflowsReq.Unmarshal(m, b)
}
func (m *FindWorkflowsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindWorkflowsReq.Marshal(b, m, deterministic)
}
func (m *FindWorkflowsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindWorkflowsReq.Merge(m, src)
}
func (m *FindWorkflowsReq) XXX_Size() int {
	return xxx_messageInfo_FindWorkflowsReq.Size(m)
}
func (m *FindWorkflowsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FindWorkflowsReq.DiscardUnknown(m)
}

var xxx_messageInfo_FindWorkflowsReq proto.InternalMessageInfo

func (m *FindWorkflowsReq) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *FindWorkflowsReq) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *FindWorkflowsReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FindWorkflowsReq) GetScanlimit() uint64 {
	if m != nil {
		return m.Scanlimit
	}
	return 0
}

func (m *FindWorkflowsReq) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type FindWorkflowsResp struct {
	Workflows            []*Workflow `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindWorkflowsResp) Reset()         { *m = FindWorkflowsResp{} }
func (m *FindWorkflowsResp) String() string { return proto.CompactTextString(m) }
func (*FindWorkflowsResp) ProtoMessage()    {}
func (*FindWorkflowsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{29}
}

func (m *FindWorkflowsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindWorkflowsResp.Unmarshal(m, b)
}
func (m *FindWorkflowsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindWorkflowsResp.Marshal(b, m, deterministic)
}
func (m *FindWorkflowsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindWorkflowsResp.Merge(m, src)
}
func (m *FindWorkflowsResp) XXX_Size() int {
	return xxx_messageInfo_FindWorkflowsResp.Size(m)
}
func (m *FindWorkflowsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FindWorkflowsResp.DiscardUnknown(m)
}

var xxx_messageInfo_FindWorkflowsResp proto.InternalMessageInfo

func (m *FindWorkflowsResp) GetWorkflows() []*Workflow {
	if m != nil {
		return m.Workflows
	}
	return nil
}

type WorkflowEvent struct {
	Workflow             *Workflow `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Thread               *Thread   `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *WorkflowEvent) Reset()         { *m = WorkflowEvent{} }
func (m *WorkflowEvent) String() string { return proto.CompactTextString(m) }
func (*WorkflowEvent) ProtoMessage()    {}
func (*WorkflowEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{30}
}

func (m *WorkflowEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowEvent.Unmarshal(m, b)
}
func (m *WorkflowEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowEvent.Marshal(b, m, deterministic)
}
func (m *WorkflowEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowEvent.Merge(m, src)
}
func (m *WorkflowEvent) XXX_Size() int {
	return xxx_messageInfo_WorkflowEvent.Size(m)
}
func (m *WorkflowEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowEvent proto.InternalMessageInfo

func (m *WorkflowEvent) GetWorkflow() *Workflow {
	if m != nil {
		return m.Workflow
	}
	return nil
}

func (m *WorkflowEvent) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

func init() {
	proto.RegisterEnum("core.Workflow_Status", Workflow_Status_name, Workflow_Status_value)
	proto.RegisterEnum("core.Thread_Status", Thread_Status_name, Thread_Status_value)
	proto.RegisterEnum("core.Select_Result", Select_Result_name, Select_Result_value)
	proto.RegisterEnum("core.Case_Op", Case_Op_name, Case_Op_value)
	proto.RegisterType((*WorkflowAPI)(nil), "core.WorkflowAPI")
	proto.RegisterType((*Workflow)(nil), "core.Workflow")
	proto.RegisterType((*Thread)(nil), "core.Thread")
	proto.RegisterType((*Type)(nil), "core.Type")
	proto.RegisterType((*NewWorkflowReq)(nil), "core.NewWorkflowReq")
	proto.RegisterType((*UpdateWorkflowReq)(nil), "core.UpdateWorkflowReq")
	proto.RegisterType((*Select)(nil), "core.Select")
	proto.RegisterType((*Case)(nil), "core.Case")
	proto.RegisterType((*Call)(nil), "core.Call")
	proto.RegisterType((*Channel)(nil), "core.Channel")
	proto.RegisterType((*ChanSelect)(nil), "core.ChanSelect")
	proto.RegisterType((*WaitCallIndex)(nil), "core.WaitCallIndex")
	proto.RegisterType((*BufData)(nil), "core.BufData")
	proto.RegisterType((*Empty)(nil), "core.Empty")
	proto.RegisterType((*RegisterWorkflowHandlerReq)(nil), "core.RegisterWorkflowHandlerReq")
	proto.RegisterType((*LockedWorkflow)(nil), "core.LockedWorkflow")
	proto.RegisterType((*MakeChanReq)(nil), "core.MakeChanReq")
	proto.RegisterType((*CloseChanReq)(nil), "core.CloseChanReq")
	proto.RegisterType((*DeleteChanReq)(nil), "core.DeleteChanReq")
	proto.RegisterType((*ListChansReq)(nil), "core.ListChansReq")
	proto.RegisterType((*ListChansResp)(nil), "core.ListChansResp")
	proto.RegisterType((*ListTypesReq)(nil), "core.ListTypesReq")
	proto.RegisterType((*ListTypesResp)(nil), "core.ListTypesResp")
	proto.RegisterType((*ListAPIsReq)(nil), "core.ListAPIsReq")
	proto.RegisterType((*ListAPIsResp)(nil), "core.ListAPIsResp")
	proto.RegisterType((*GetWorkflowReq)(nil), "core.GetWorkflowReq")
	proto.RegisterType((*LockWorkflowReq)(nil), "core.LockWorkflowReq")
	proto.RegisterType((*ListenWorkflowsUpdatesReq)(nil), "core.ListenWorkflowsUpdatesReq")
	proto.RegisterType((*FindWorkflowsReq)(nil), "core.FindWorkflowsReq")
	proto.RegisterType((*FindWorkflowsResp)(nil), "core.FindWorkflowsResp")
	proto.RegisterType((*WorkflowEvent)(nil), "core.WorkflowEvent")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 1496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5d, 0x6f, 0x13, 0x47,
	0x17, 0x7e, 0x77, 0xbd, 0x5e, 0xdb, 0xc7, 0x1f, 0xaf, 0x19, 0x20, 0xf8, 0xb5, 0x78, 0xa9, 0x99,
	0x02, 0x4a, 0x0b, 0x8d, 0x42, 0xa0, 0xbd, 0x69, 0x8b, 0x1a, 0x12, 0x08, 0x51, 0xa1, 0x89, 0xd6,
	0x20, 0xa4, 0xde, 0x6d, 0x76, 0xc7, 0x64, 0xcb, 0x7a, 0x77, 0xbb, 0x33, 0x36, 0x84, 0xcb, 0xde,
	0xf4, 0x1f, 0x54, 0xea, 0x65, 0xff, 0x4b, 0xff, 0x43, 0xa5, 0x4a, 0xfd, 0x2f, 0xd5, 0x7c, 0xad,
	0x67, 0x1c, 0x07, 0xa8, 0xe8, 0x95, 0x67, 0xce, 0x39, 0x33, 0xf3, 0x9c, 0x67, 0xce, 0x79, 0x66,
	0x65, 0x68, 0xb3, 0x93, 0x82, 0xd0, 0x8d, 0xa2, 0xcc, 0x59, 0x8e, 0xbc, 0x28, 0x2f, 0x09, 0xfe,
	0xcd, 0x81, 0xf6, 0xf3, 0xbc, 0x7c, 0x39, 0x49, 0xf3, 0x57, 0xdb, 0x87, 0xfb, 0x08, 0x81, 0x97,
	0x85, 0x53, 0x32, 0x70, 0x46, 0xce, 0x7a, 0x2b, 0x10, 0x63, 0x34, 0x82, 0x76, 0x4c, 0x68, 0x54,
	0x26, 0x05, 0x4b, 0xf2, 0x6c, 0xe0, 0x0a, 0x97, 0x69, 0x42, 0x03, 0x68, 0x50, 0x52, 0xce, 0x93,
	0x88, 0x0c, 0x6a, 0xc2, 0xab, 0xa7, 0xe8, 0x02, 0xd4, 0x93, 0xac, 0x98, 0xb1, 0x81, 0x27, 0xec,
	0x72, 0x82, 0xd6, 0xc0, 0xcf, 0x67, 0x8c, 0x9b, 0xeb, 0xc2, 0xac, 0x66, 0x3c, 0x9a, 0xb2, 0x90,
	0x91, 0x81, 0x2f, 0xa3, 0xc5, 0x04, 0xff, 0xe9, 0x42, 0x53, 0x63, 0x44, 0x3d, 0x70, 0x93, 0x58,
	0xc1, 0x73, 0x93, 0xb8, 0x02, 0xec, 0x1a, 0x80, 0xcf, 0x86, 0xf3, 0x19, 0xf8, 0x7c, 0xcf, 0x19,
	0x15, 0x78, 0x7a, 0x5b, 0x17, 0x37, 0x38, 0x0b, 0x1b, 0x7a, 0xf7, 0x8d, 0xb1, 0x70, 0x06, 0x2a,
	0x08, 0xdd, 0x80, 0x06, 0x3b, 0x2e, 0x49, 0x18, 0xd3, 0x41, 0x7d, 0x54, 0x5b, 0x6f, 0x6f, 0x75,
	0x64, 0xfc, 0x53, 0x61, 0x0c, 0xb4, 0xd3, 0xc6, 0xdd, 0x51, 0xb8, 0x17, 0xb9, 0x37, 0xa4, 0x75,
	0x39, 0xf7, 0xa6, 0x30, 0xeb, 0xdc, 0x07, 0xd0, 0x98, 0x93, 0x92, 0x72, 0x86, 0x5b, 0x23, 0x67,
	0xdd, 0x0b, 0xf4, 0x14, 0x5d, 0x86, 0xd6, 0xac, 0x88, 0x43, 0x46, 0xe2, 0x6d, 0x36, 0x00, 0xe1,
	0x5b, 0x18, 0xf0, 0xd7, 0xe0, 0x4b, 0xd4, 0xa8, 0x0d, 0x8d, 0xfd, 0x6c, 0x1e, 0xa6, 0x49, 0xdc,
	0xff, 0x0f, 0x9f, 0x8c, 0x59, 0x58, 0x32, 0x12, 0xf7, 0x1d, 0x3e, 0x09, 0x66, 0x59, 0x96, 0x64,
	0x2f, 0xfa, 0x2e, 0xea, 0x40, 0xf3, 0x61, 0x92, 0x25, 0xf4, 0x98, 0xc4, 0xfd, 0x1a, 0xfe, 0xcb,
	0x05, 0x5f, 0xa6, 0x73, 0x8a, 0xda, 0x21, 0x34, 0x5f, 0x29, 0x62, 0x14, 0xbd, 0xd5, 0xdc, 0xa4,
	0xd8, 0xb3, 0x29, 0xbe, 0x59, 0x51, 0xec, 0x0b, 0x8a, 0xcf, 0x9b, 0x94, 0x2d, 0x13, 0x7c, 0x0d,
	0x7c, 0x4a, 0x52, 0x12, 0xc9, 0x42, 0xa8, 0xf8, 0x1d, 0x0b, 0x5b, 0xa0, 0x7c, 0xe8, 0x0a, 0x78,
	0x51, 0x98, 0xa6, 0x83, 0x8e, 0x88, 0x01, 0x19, 0xb3, 0x13, 0xa6, 0x69, 0x20, 0xec, 0x9c, 0xa0,
	0xa3, 0x34, 0x8f, 0x5e, 0x0a, 0x82, 0x9a, 0x92, 0xa0, 0xca, 0xc0, 0xcb, 0x77, 0x96, 0x2d, 0xfc,
	0x92, 0x5c, 0xd3, 0xc4, 0x13, 0x65, 0xb9, 0x44, 0x36, 0xe8, 0xca, 0x44, 0xf5, 0x1c, 0xdf, 0x3b,
	0x93, 0xde, 0xfb, 0x72, 0x7d, 0xdf, 0x41, 0x5d, 0x68, 0x3d, 0xd3, 0xdb, 0xf5, 0x5d, 0xee, 0xdb,
	0x3e, 0xca, 0x05, 0xf5, 0x35, 0x5c, 0x82, 0xf7, 0xf4, 0xa4, 0x20, 0xa7, 0xc8, 0x7d, 0x77, 0x53,
	0x5d, 0x01, 0xf8, 0x81, 0xe6, 0xd9, 0x38, 0x3a, 0x26, 0xd3, 0x50, 0x14, 0x72, 0x27, 0x30, 0x2c,
	0x66, 0xc1, 0x78, 0x56, 0xc1, 0xe0, 0x4d, 0xe8, 0x7d, 0x47, 0x5e, 0xe9, 0xa2, 0x0e, 0xc8, 0x8f,
	0x15, 0x83, 0xce, 0x6a, 0x06, 0xf1, 0x09, 0x9c, 0x7b, 0x26, 0x2a, 0xca, 0x5c, 0xf4, 0xa9, 0x71,
	0xff, 0x72, 0x61, 0xcf, 0x6e, 0x17, 0xa3, 0x1e, 0xd6, 0xc0, 0xe7, 0xf9, 0xef, 0xc7, 0x22, 0x13,
	0x2f, 0x50, 0xb3, 0x65, 0xf2, 0x6b, 0xa7, 0xc8, 0xc7, 0xbf, 0x3b, 0xe0, 0xcb, 0xfb, 0x46, 0x23,
	0xa8, 0x47, 0x21, 0x25, 0x74, 0xe0, 0x88, 0x66, 0xab, 0x60, 0x52, 0x12, 0x48, 0x07, 0xba, 0x06,
	0xdd, 0x6a, 0x2d, 0xb7, 0xab, 0xd3, 0x6c, 0x23, 0xbf, 0xcf, 0x92, 0x44, 0xf3, 0xdd, 0x90, 0x69,
	0xde, 0xaa, 0x39, 0x2f, 0xcf, 0x92, 0xd0, 0x59, 0xca, 0x94, 0x02, 0x9c, 0x37, 0x2b, 0x6e, 0x23,
	0x10, 0xae, 0x40, 0x85, 0xe0, 0x4f, 0xc0, 0x97, 0x16, 0xfb, 0xf2, 0x7d, 0x70, 0x0f, 0xbe, 0xed,
	0x3b, 0x08, 0xc0, 0xdf, 0x49, 0x73, 0xca, 0x2f, 0x1d, 0xff, 0xe1, 0x80, 0xa7, 0x0f, 0xaf, 0x8a,
	0xc9, 0xb1, 0x8b, 0x09, 0xfd, 0x1f, 0xdc, 0xbc, 0x10, 0x98, 0x7b, 0x5b, 0xdd, 0x45, 0x76, 0x1b,
	0x07, 0x45, 0xe0, 0xe6, 0x05, 0xd7, 0xb2, 0xe8, 0x38, 0xcc, 0x94, 0x68, 0x89, 0x31, 0xb7, 0xb1,
	0x64, 0x4a, 0xd4, 0x15, 0x8b, 0x31, 0xb7, 0xc5, 0x3c, 0xb7, 0xba, 0xc8, 0x4d, 0x8c, 0xf9, 0xb1,
	0xfc, 0x97, 0xd7, 0x9a, 0x52, 0xcf, 0x6a, 0x8e, 0xbf, 0x02, 0xf7, 0xa0, 0xb0, 0x53, 0x68, 0x82,
	0x37, 0x26, 0x19, 0x2f, 0xde, 0x26, 0x78, 0x01, 0x89, 0xe6, 0x7d, 0x97, 0x8f, 0x9e, 0x26, 0x53,
	0xd2, 0xaf, 0xf1, 0xd0, 0x5d, 0x32, 0x09, 0x67, 0x29, 0xeb, 0xd7, 0xf1, 0x2f, 0x22, 0xb3, 0x34,
	0x7d, 0x2f, 0xe9, 0xad, 0x34, 0xaf, 0x66, 0x6a, 0xde, 0x65, 0x68, 0x89, 0x81, 0x40, 0x27, 0xf5,
	0x62, 0x61, 0xe0, 0x85, 0x2e, 0x35, 0x50, 0xb8, 0xe5, 0x8b, 0x60, 0x58, 0x0c, 0xc5, 0xf4, 0x4d,
	0xc5, 0xc4, 0x3f, 0x3b, 0xd0, 0xd8, 0x39, 0x0e, 0xb3, 0x8c, 0xa4, 0xab, 0xb4, 0xab, 0xa2, 0xc3,
	0xb5, 0xe9, 0xe0, 0xfb, 0x45, 0xe2, 0xda, 0x04, 0xc8, 0x66, 0xa0, 0x66, 0xbc, 0xa1, 0x8e, 0x66,
	0x93, 0x71, 0xf2, 0x46, 0xb3, 0xad, 0xa7, 0x1c, 0xe1, 0xd1, 0x6c, 0xf2, 0x24, 0x7c, 0x2d, 0x9c,
	0x75, 0xe1, 0x34, 0x2c, 0xf8, 0x1e, 0x00, 0x07, 0xa2, 0xca, 0xd8, 0x92, 0x23, 0x67, 0x59, 0x8e,
	0xf8, 0x25, 0x2f, 0x2a, 0x57, 0x8c, 0xf1, 0x01, 0x74, 0x9f, 0x87, 0x09, 0xe3, 0x2c, 0xef, 0x67,
	0x31, 0x79, 0xfd, 0x8e, 0x2d, 0x46, 0xd0, 0xd6, 0x8d, 0x47, 0x55, 0xc7, 0xb5, 0x02, 0xd3, 0x84,
	0xf7, 0xa0, 0x71, 0x7f, 0x36, 0x11, 0x05, 0x8f, 0xc0, 0xe3, 0xd8, 0xf4, 0x8b, 0xbe, 0xa3, 0x8a,
	0x6a, 0xd7, 0x28, 0x20, 0x11, 0x77, 0x01, 0xea, 0x11, 0x3f, 0x41, 0x90, 0xec, 0x05, 0x72, 0x82,
	0x1b, 0x50, 0x7f, 0x30, 0x2d, 0xd8, 0x09, 0x2e, 0x61, 0x18, 0x90, 0x17, 0x09, 0x65, 0xa4, 0xd4,
	0xed, 0xff, 0x28, 0xcc, 0xe2, 0x94, 0x94, 0x5c, 0x2a, 0x8c, 0xe7, 0xc0, 0xb1, 0x9f, 0x03, 0x04,
	0x5e, 0x91, 0xe7, 0xa9, 0x00, 0x59, 0x0b, 0xc4, 0x18, 0xdd, 0x80, 0x5e, 0x91, 0xf3, 0x54, 0x19,
	0x29, 0xe7, 0x61, 0xfa, 0x84, 0x8a, 0x8b, 0xa8, 0x05, 0x4b, 0x56, 0xfc, 0x06, 0x7a, 0x8f, 0x45,
	0xce, 0xd5, 0xeb, 0xff, 0x4f, 0x24, 0xe9, 0x1a, 0xf8, 0xf2, 0x7d, 0x16, 0x67, 0x2f, 0xbf, 0xdd,
	0xca, 0x67, 0x08, 0x57, 0xcd, 0x14, 0x2e, 0xbc, 0x09, 0xed, 0x27, 0xe1, 0x4b, 0xc2, 0xe9, 0xe2,
	0x09, 0x5e, 0x55, 0xad, 0x29, 0x0f, 0xd5, 0xbd, 0x2b, 0x8b, 0x4f, 0x76, 0x2a, 0x1e, 0x41, 0x47,
	0xa8, 0x81, 0x5e, 0xd2, 0x87, 0x5a, 0x12, 0x4b, 0x2d, 0x6b, 0x05, 0x7c, 0x88, 0xaf, 0x42, 0x77,
	0x97, 0xa4, 0x84, 0xbd, 0x25, 0xe4, 0x11, 0x74, 0x1e, 0x27, 0x94, 0xf1, 0x00, 0xca, 0x23, 0x56,
	0xf4, 0xdc, 0xa4, 0xcc, 0xa7, 0xba, 0xe7, 0xf8, 0x98, 0xdf, 0x5c, 0x9a, 0x4c, 0x13, 0xad, 0xae,
	0x72, 0x82, 0xef, 0x42, 0xd7, 0xd8, 0x89, 0x16, 0xe8, 0x63, 0xa8, 0x73, 0x9c, 0x5a, 0x5d, 0x97,
	0x72, 0x90, 0x3e, 0x7d, 0x3e, 0xef, 0x93, 0x0f, 0x3c, 0xff, 0xb6, 0x3c, 0x5f, 0xed, 0x44, 0x0b,
	0xae, 0xee, 0xe2, 0xfb, 0xd3, 0x56, 0x77, 0xee, 0x0f, 0xa4, 0x03, 0xef, 0x41, 0x9b, 0x2f, 0xd9,
	0x3e, 0xdc, 0xff, 0xc0, 0xb3, 0x3f, 0x97, 0x59, 0xc8, 0x8d, 0x68, 0x81, 0xae, 0x83, 0x17, 0x16,
	0x89, 0x3e, 0xf9, 0x9c, 0x5d, 0x32, 0xdb, 0x87, 0xfb, 0x81, 0x70, 0xe3, 0x11, 0xf4, 0xf6, 0x08,
	0x33, 0x9f, 0xc0, 0x25, 0x08, 0xf8, 0x2a, 0xfc, 0x97, 0x57, 0xe4, 0xdb, 0x42, 0xf6, 0xe0, 0x7f,
	0xfc, 0x6c, 0x92, 0xe9, 0x20, 0x2a, 0x5f, 0x56, 0x91, 0x92, 0x4e, 0x41, 0xb6, 0xb4, 0x4c, 0x61,
	0x0d, 0xfc, 0x49, 0x92, 0x32, 0x52, 0x2a, 0xdd, 0x57, 0x33, 0xfc, 0x93, 0x03, 0xfd, 0x87, 0x49,
	0x56, 0x15, 0xff, 0x99, 0x1b, 0xf4, 0xc0, 0x65, 0xb9, 0xd2, 0x13, 0x97, 0xe5, 0xab, 0x39, 0xe1,
	0x92, 0x42, 0xa3, 0x30, 0x93, 0x1e, 0x29, 0x61, 0x0b, 0x83, 0x01, 0xc2, 0xb3, 0x40, 0x6c, 0xc3,
	0xb9, 0x25, 0x0c, 0xb4, 0x40, 0xb7, 0xa0, 0x55, 0x89, 0x8d, 0xe2, 0x74, 0xb9, 0x0d, 0x17, 0x01,
	0x38, 0x84, 0xae, 0x36, 0x3f, 0x98, 0x93, 0x8c, 0xfd, 0xfb, 0x4d, 0xbc, 0xf5, 0x6b, 0x43, 0x7c,
	0xe0, 0x8a, 0xc7, 0x71, 0x13, 0xda, 0xc6, 0xc7, 0x0f, 0xba, 0x20, 0x17, 0xd8, 0xdf, 0x43, 0xc3,
	0xb6, 0xb4, 0x0a, 0x69, 0x43, 0x5f, 0x40, 0xcf, 0xfe, 0xf8, 0x41, 0x97, 0xa4, 0xfb, 0xd4, 0x27,
	0x91, 0xbd, 0x6e, 0x0c, 0x97, 0xce, 0x90, 0x44, 0x34, 0x92, 0x71, 0x67, 0x2b, 0xe6, 0x50, 0xe1,
	0xb2, 0xf5, 0x6d, 0xd3, 0x41, 0x77, 0xa0, 0x6d, 0xd4, 0xa0, 0x86, 0x6f, 0x97, 0xe5, 0x70, 0x89,
	0x2f, 0xf4, 0x25, 0x74, 0xcc, 0xb2, 0x44, 0x17, 0x17, 0x9b, 0x9b, 0xcb, 0x56, 0x9e, 0x89, 0x0e,
	0x61, 0x6d, 0x75, 0xc1, 0xa2, 0x8f, 0x54, 0xfc, 0x59, 0xe5, 0x3c, 0x3c, 0x6f, 0xe3, 0x10, 0xd7,
	0xbb, 0xe9, 0xa0, 0x6f, 0xa0, 0x6b, 0x15, 0x0d, 0x5a, 0x93, 0x71, 0xcb, 0xd5, 0x3c, 0xbc, 0xb4,
	0xd2, 0x4e, 0x0b, 0x5e, 0x22, 0x5a, 0x7d, 0x91, 0x6a, 0x57, 0x43, 0x8d, 0xed, 0x6b, 0xb8, 0x0b,
	0xad, 0x4a, 0xe8, 0x10, 0x5a, 0x40, 0xd6, 0x1a, 0xaa, 0x51, 0xda, 0x6a, 0x78, 0x0b, 0x5a, 0x95,
	0x5a, 0xeb, 0x55, 0xa6, 0x7c, 0xdb, 0x67, 0x6c, 0x00, 0x2c, 0x94, 0x1b, 0xa9, 0x0d, 0x2d, 0x2d,
	0xb7, 0xe3, 0x31, 0x34, 0x0e, 0xd5, 0xd7, 0x8b, 0xa1, 0x73, 0x2b, 0x71, 0x0b, 0x81, 0x34, 0x71,
	0x6b, 0xed, 0x35, 0x71, 0x2f, 0x54, 0xf4, 0xba, 0x46, 0xf2, 0xf6, 0xcd, 0xd7, 0xc1, 0x3f, 0x9c,
	0x71, 0x01, 0x44, 0xa7, 0xd5, 0xce, 0x8e, 0xbc, 0x0d, 0x4d, 0xad, 0x95, 0x3a, 0xd6, 0x10, 0xe1,
	0x21, 0x5a, 0x36, 0xd1, 0x02, 0xdd, 0x84, 0x96, 0xc4, 0xf0, 0x1e, 0xfb, 0xdf, 0x6f, 0x7c, 0x5f,
	0x0f, 0xe9, 0x49, 0x16, 0x1d, 0xf9, 0xe2, 0x7f, 0x87, 0x3b, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x01, 0x6f, 0xa5, 0x7b, 0x86, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RuntimeClient is the client API for Runtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuntimeClient interface {
	// Create new workflow using specified Input and API to call
	// If workflow is already created - error will be returned
	NewWorkflow(ctx context.Context, in *NewWorkflowReq, opts ...grpc.CallOption) (*Empty, error)
	// Update previously locked workflow with the new state
	// This operation may fail if some of selects were removed, while being unblocked.
	UpdateWorkflow(ctx context.Context, in *UpdateWorkflowReq, opts ...grpc.CallOption) (*Empty, error)
	// Listen for unblocked workflows, workflow events and then updated workflows.
	// Only 1 client can receive a workflow at a time
	// For each Workflow - all updates to it are executed one by one.
	// If multiple clients connect with the same "Service" name - events are randomly distributed between them,
	// however if one of the clients becomes slow - it may slowdown other clients with same "Service" name
	// Clients with different "Service" name do not affect each other. They have separate execution queues and
	// update distribution pool
	RegisterWorkflowHandler(ctx context.Context, in *RegisterWorkflowHandlerReq, opts ...grpc.CallOption) (Runtime_RegisterWorkflowHandlerClient, error)
	// Get current workflow
	GetWorkflow(ctx context.Context, in *GetWorkflowReq, opts ...grpc.CallOption) (*Workflow, error)
	// Manually lock workflow to change it's state via UpdateWorkflow
	LockWorkflow(ctx context.Context, in *LockWorkflowReq, opts ...grpc.CallOption) (*LockedWorkflow, error)
	// Listen for updates states. You can use this to sync data with other DB's, for ex. Search / Reports / etc.
	ListenWorkflowsUpdates(ctx context.Context, in *ListenWorkflowsUpdatesReq, opts ...grpc.CallOption) (Runtime_ListenWorkflowsUpdatesClient, error)
	FindWorkflows(ctx context.Context, in *FindWorkflowsReq, opts ...grpc.CallOption) (*FindWorkflowsResp, error)
	MakeChan(ctx context.Context, in *MakeChanReq, opts ...grpc.CallOption) (*Empty, error)
	ListChans(ctx context.Context, in *ListChansReq, opts ...grpc.CallOption) (*ListChansResp, error)
	CloseChan(ctx context.Context, in *CloseChanReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteChan(ctx context.Context, in *DeleteChanReq, opts ...grpc.CallOption) (*Empty, error)
	PutType(ctx context.Context, in *Type, opts ...grpc.CallOption) (*Empty, error)
	ListTypes(ctx context.Context, in *ListTypesReq, opts ...grpc.CallOption) (*ListTypesResp, error)
	DeleteType(ctx context.Context, in *Type, opts ...grpc.CallOption) (*Empty, error)
	PutAPI(ctx context.Context, in *WorkflowAPI, opts ...grpc.CallOption) (*Empty, error)
	ListAPIs(ctx context.Context, in *ListAPIsReq, opts ...grpc.CallOption) (*ListAPIsResp, error)
	DeleteAPI(ctx context.Context, in *WorkflowAPI, opts ...grpc.CallOption) (*Empty, error)
}

type runtimeClient struct {
	cc *grpc.ClientConn
}

func NewRuntimeClient(cc *grpc.ClientConn) RuntimeClient {
	return &runtimeClient{cc}
}

func (c *runtimeClient) NewWorkflow(ctx context.Context, in *NewWorkflowReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.Runtime/NewWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) UpdateWorkflow(ctx context.Context, in *UpdateWorkflowReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.Runtime/UpdateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) RegisterWorkflowHandler(ctx context.Context, in *RegisterWorkflowHandlerReq, opts ...grpc.CallOption) (Runtime_RegisterWorkflowHandlerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Runtime_serviceDesc.Streams[0], "/core.Runtime/RegisterWorkflowHandler", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeRegisterWorkflowHandlerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runtime_RegisterWorkflowHandlerClient interface {
	Recv() (*LockedWorkflow, error)
	grpc.ClientStream
}

type runtimeRegisterWorkflowHandlerClient struct {
	grpc.ClientStream
}

func (x *runtimeRegisterWorkflowHandlerClient) Recv() (*LockedWorkflow, error) {
	m := new(LockedWorkflow)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeClient) GetWorkflow(ctx context.Context, in *GetWorkflowReq, opts ...grpc.CallOption) (*Workflow, error) {
	out := new(Workflow)
	err := c.cc.Invoke(ctx, "/core.Runtime/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) LockWorkflow(ctx context.Context, in *LockWorkflowReq, opts ...grpc.CallOption) (*LockedWorkflow, error) {
	out := new(LockedWorkflow)
	err := c.cc.Invoke(ctx, "/core.Runtime/LockWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) ListenWorkflowsUpdates(ctx context.Context, in *ListenWorkflowsUpdatesReq, opts ...grpc.CallOption) (Runtime_ListenWorkflowsUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Runtime_serviceDesc.Streams[1], "/core.Runtime/ListenWorkflowsUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeListenWorkflowsUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runtime_ListenWorkflowsUpdatesClient interface {
	Recv() (*WorkflowEvent, error)
	grpc.ClientStream
}

type runtimeListenWorkflowsUpdatesClient struct {
	grpc.ClientStream
}

func (x *runtimeListenWorkflowsUpdatesClient) Recv() (*WorkflowEvent, error) {
	m := new(WorkflowEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeClient) FindWorkflows(ctx context.Context, in *FindWorkflowsReq, opts ...grpc.CallOption) (*FindWorkflowsResp, error) {
	out := new(FindWorkflowsResp)
	err := c.cc.Invoke(ctx, "/core.Runtime/FindWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) MakeChan(ctx context.Context, in *MakeChanReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.Runtime/MakeChan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) ListChans(ctx context.Context, in *ListChansReq, opts ...grpc.CallOption) (*ListChansResp, error) {
	out := new(ListChansResp)
	err := c.cc.Invoke(ctx, "/core.Runtime/ListChans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) CloseChan(ctx context.Context, in *CloseChanReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.Runtime/CloseChan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) DeleteChan(ctx context.Context, in *DeleteChanReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.Runtime/DeleteChan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) PutType(ctx context.Context, in *Type, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.Runtime/PutType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) ListTypes(ctx context.Context, in *ListTypesReq, opts ...grpc.CallOption) (*ListTypesResp, error) {
	out := new(ListTypesResp)
	err := c.cc.Invoke(ctx, "/core.Runtime/ListTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) DeleteType(ctx context.Context, in *Type, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.Runtime/DeleteType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) PutAPI(ctx context.Context, in *WorkflowAPI, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.Runtime/PutAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) ListAPIs(ctx context.Context, in *ListAPIsReq, opts ...grpc.CallOption) (*ListAPIsResp, error) {
	out := new(ListAPIsResp)
	err := c.cc.Invoke(ctx, "/core.Runtime/ListAPIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) DeleteAPI(ctx context.Context, in *WorkflowAPI, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.Runtime/DeleteAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServer is the server API for Runtime service.
type RuntimeServer interface {
	// Create new workflow using specified Input and API to call
	// If workflow is already created - error will be returned
	NewWorkflow(context.Context, *NewWorkflowReq) (*Empty, error)
	// Update previously locked workflow with the new state
	// This operation may fail if some of selects were removed, while being unblocked.
	UpdateWorkflow(context.Context, *UpdateWorkflowReq) (*Empty, error)
	// Listen for unblocked workflows, workflow events and then updated workflows.
	// Only 1 client can receive a workflow at a time
	// For each Workflow - all updates to it are executed one by one.
	// If multiple clients connect with the same "Service" name - events are randomly distributed between them,
	// however if one of the clients becomes slow - it may slowdown other clients with same "Service" name
	// Clients with different "Service" name do not affect each other. They have separate execution queues and
	// update distribution pool
	RegisterWorkflowHandler(*RegisterWorkflowHandlerReq, Runtime_RegisterWorkflowHandlerServer) error
	// Get current workflow
	GetWorkflow(context.Context, *GetWorkflowReq) (*Workflow, error)
	// Manually lock workflow to change it's state via UpdateWorkflow
	LockWorkflow(context.Context, *LockWorkflowReq) (*LockedWorkflow, error)
	// Listen for updates states. You can use this to sync data with other DB's, for ex. Search / Reports / etc.
	ListenWorkflowsUpdates(*ListenWorkflowsUpdatesReq, Runtime_ListenWorkflowsUpdatesServer) error
	FindWorkflows(context.Context, *FindWorkflowsReq) (*FindWorkflowsResp, error)
	MakeChan(context.Context, *MakeChanReq) (*Empty, error)
	ListChans(context.Context, *ListChansReq) (*ListChansResp, error)
	CloseChan(context.Context, *CloseChanReq) (*Empty, error)
	DeleteChan(context.Context, *DeleteChanReq) (*Empty, error)
	PutType(context.Context, *Type) (*Empty, error)
	ListTypes(context.Context, *ListTypesReq) (*ListTypesResp, error)
	DeleteType(context.Context, *Type) (*Empty, error)
	PutAPI(context.Context, *WorkflowAPI) (*Empty, error)
	ListAPIs(context.Context, *ListAPIsReq) (*ListAPIsResp, error)
	DeleteAPI(context.Context, *WorkflowAPI) (*Empty, error)
}

func RegisterRuntimeServer(s *grpc.Server, srv RuntimeServer) {
	s.RegisterService(&_Runtime_serviceDesc, srv)
}

func _Runtime_NewWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).NewWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/NewWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).NewWorkflow(ctx, req.(*NewWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_UpdateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).UpdateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/UpdateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).UpdateWorkflow(ctx, req.(*UpdateWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_RegisterWorkflowHandler_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterWorkflowHandlerReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServer).RegisterWorkflowHandler(m, &runtimeRegisterWorkflowHandlerServer{stream})
}

type Runtime_RegisterWorkflowHandlerServer interface {
	Send(*LockedWorkflow) error
	grpc.ServerStream
}

type runtimeRegisterWorkflowHandlerServer struct {
	grpc.ServerStream
}

func (x *runtimeRegisterWorkflowHandlerServer) Send(m *LockedWorkflow) error {
	return x.ServerStream.SendMsg(m)
}

func _Runtime_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).GetWorkflow(ctx, req.(*GetWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_LockWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).LockWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/LockWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).LockWorkflow(ctx, req.(*LockWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_ListenWorkflowsUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenWorkflowsUpdatesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServer).ListenWorkflowsUpdates(m, &runtimeListenWorkflowsUpdatesServer{stream})
}

type Runtime_ListenWorkflowsUpdatesServer interface {
	Send(*WorkflowEvent) error
	grpc.ServerStream
}

type runtimeListenWorkflowsUpdatesServer struct {
	grpc.ServerStream
}

func (x *runtimeListenWorkflowsUpdatesServer) Send(m *WorkflowEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Runtime_FindWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWorkflowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).FindWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/FindWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).FindWorkflows(ctx, req.(*FindWorkflowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_MakeChan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeChanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).MakeChan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/MakeChan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).MakeChan(ctx, req.(*MakeChanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_ListChans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).ListChans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/ListChans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).ListChans(ctx, req.(*ListChansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_CloseChan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseChanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).CloseChan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/CloseChan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).CloseChan(ctx, req.(*CloseChanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_DeleteChan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).DeleteChan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/DeleteChan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).DeleteChan(ctx, req.(*DeleteChanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_PutType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Type)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).PutType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/PutType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).PutType(ctx, req.(*Type))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_ListTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTypesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).ListTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/ListTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).ListTypes(ctx, req.(*ListTypesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_DeleteType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Type)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).DeleteType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/DeleteType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).DeleteType(ctx, req.(*Type))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_PutAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowAPI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).PutAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/PutAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).PutAPI(ctx, req.(*WorkflowAPI))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_ListAPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).ListAPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/ListAPIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).ListAPIs(ctx, req.(*ListAPIsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_DeleteAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowAPI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).DeleteAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Runtime/DeleteAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).DeleteAPI(ctx, req.(*WorkflowAPI))
	}
	return interceptor(ctx, in, info, handler)
}

var _Runtime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.Runtime",
	HandlerType: (*RuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewWorkflow",
			Handler:    _Runtime_NewWorkflow_Handler,
		},
		{
			MethodName: "UpdateWorkflow",
			Handler:    _Runtime_UpdateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _Runtime_GetWorkflow_Handler,
		},
		{
			MethodName: "LockWorkflow",
			Handler:    _Runtime_LockWorkflow_Handler,
		},
		{
			MethodName: "FindWorkflows",
			Handler:    _Runtime_FindWorkflows_Handler,
		},
		{
			MethodName: "MakeChan",
			Handler:    _Runtime_MakeChan_Handler,
		},
		{
			MethodName: "ListChans",
			Handler:    _Runtime_ListChans_Handler,
		},
		{
			MethodName: "CloseChan",
			Handler:    _Runtime_CloseChan_Handler,
		},
		{
			MethodName: "DeleteChan",
			Handler:    _Runtime_DeleteChan_Handler,
		},
		{
			MethodName: "PutType",
			Handler:    _Runtime_PutType_Handler,
		},
		{
			MethodName: "ListTypes",
			Handler:    _Runtime_ListTypes_Handler,
		},
		{
			MethodName: "DeleteType",
			Handler:    _Runtime_DeleteType_Handler,
		},
		{
			MethodName: "PutAPI",
			Handler:    _Runtime_PutAPI_Handler,
		},
		{
			MethodName: "ListAPIs",
			Handler:    _Runtime_ListAPIs_Handler,
		},
		{
			MethodName: "DeleteAPI",
			Handler:    _Runtime_DeleteAPI_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterWorkflowHandler",
			Handler:       _Runtime_RegisterWorkflowHandler_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenWorkflowsUpdates",
			Handler:       _Runtime_ListenWorkflowsUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}
