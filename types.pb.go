// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

package async

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Process_Status int32

const (
	Process_Invalid  Process_Status = 0
	Process_Started  Process_Status = 1
	Process_Running  Process_Status = 2
	Process_Finished Process_Status = 3
)

var Process_Status_name = map[int32]string{
	0: "Invalid",
	1: "Started",
	2: "Running",
	3: "Finished",
}

var Process_Status_value = map[string]int32{
	"Invalid":  0,
	"Started":  1,
	"Running":  2,
	"Finished": 3,
}

func (x Process_Status) String() string {
	return proto.EnumName(Process_Status_name, int32(x))
}

func (Process_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0, 0}
}

type Select_Result int32

const (
	Select_Invalid Select_Result = 0
	Select_OK      Select_Result = 1
	Select_Closed  Select_Result = 2
)

var Select_Result_name = map[int32]string{
	0: "Invalid",
	1: "OK",
	2: "Closed",
}

var Select_Result_value = map[string]int32{
	"Invalid": 0,
	"OK":      1,
	"Closed":  2,
}

func (x Select_Result) String() string {
	return proto.EnumName(Select_Result_name, int32(x))
}

func (Select_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{6, 0}
}

type Case_Op int32

const (
	Case_Invalid Case_Op = 0
	Case_Send    Case_Op = 1
	Case_Recv    Case_Op = 2
	Case_Time    Case_Op = 3
	Case_Default Case_Op = 5
)

var Case_Op_name = map[int32]string{
	0: "Invalid",
	1: "Send",
	2: "Recv",
	3: "Time",
	5: "Default",
}

var Case_Op_value = map[string]int32{
	"Invalid": 0,
	"Send":    1,
	"Recv":    2,
	"Time":    3,
	"Default": 5,
}

func (x Case_Op) String() string {
	return proto.EnumName(Case_Op_name, int32(x))
}

func (Case_Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{7, 0}
}

type Thread_Status int32

const (
	Thread_Invalid   Thread_Status = 0
	Thread_Blocked   Thread_Status = 1
	Thread_Unblocked Thread_Status = 2
	Thread_Aborted   Thread_Status = 3
)

var Thread_Status_name = map[int32]string{
	0: "Invalid",
	1: "Blocked",
	2: "Unblocked",
	3: "Aborted",
}

var Thread_Status_value = map[string]int32{
	"Invalid":   0,
	"Blocked":   1,
	"Unblocked": 2,
	"Aborted":   3,
}

func (x Thread_Status) String() string {
	return proto.EnumName(Thread_Status_name, int32(x))
}

func (Thread_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{9, 0}
}

type Process struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Service              string         `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Status               Process_Status `protobuf:"varint,4,opt,name=status,proto3,enum=async.Process_Status" json:"status,omitempty"`
	Threads              []*Thread      `protobuf:"bytes,5,rep,name=threads,proto3" json:"threads,omitempty"`
	State                []byte         `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Input                []byte         `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`
	Output               []byte         `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
	Version              uint64         `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	UpdatedAt            uint64         `protobuf:"varint,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Process) Reset()         { *m = Process{} }
func (m *Process) String() string { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()    {}
func (*Process) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}

func (m *Process) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process.Unmarshal(m, b)
}
func (m *Process) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process.Marshal(b, m, deterministic)
}
func (m *Process) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process.Merge(m, src)
}
func (m *Process) XXX_Size() int {
	return xxx_messageInfo_Process.Size(m)
}
func (m *Process) XXX_DiscardUnknown() {
	xxx_messageInfo_Process.DiscardUnknown(m)
}

var xxx_messageInfo_Process proto.InternalMessageInfo

func (m *Process) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Process) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Process) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Process) GetStatus() Process_Status {
	if m != nil {
		return m.Status
	}
	return Process_Invalid
}

func (m *Process) GetThreads() []*Thread {
	if m != nil {
		return m.Threads
	}
	return nil
}

func (m *Process) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Process) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Process) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Process) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Process) GetUpdatedAt() uint64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type Type struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	JsonSchema           []byte   `protobuf:"bytes,3,opt,name=jsonSchema,proto3" json:"jsonSchema,omitempty"`
	Version              uint64   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Type) Reset()         { *m = Type{} }
func (m *Type) String() string { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()    {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}

func (m *Type) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Type.Unmarshal(m, b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Type.Marshal(b, m, deterministic)
}
func (m *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(m, src)
}
func (m *Type) XXX_Size() int {
	return xxx_messageInfo_Type.Size(m)
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

func (m *Type) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Type) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Type) GetJsonSchema() []byte {
	if m != nil {
		return m.JsonSchema
	}
	return nil
}

func (m *Type) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type ProcessAPI struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Service              string   `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Input                string   `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Output               string   `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	State                string   `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessAPI) Reset()         { *m = ProcessAPI{} }
func (m *ProcessAPI) String() string { return proto.CompactTextString(m) }
func (*ProcessAPI) ProtoMessage()    {}
func (*ProcessAPI) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2}
}

func (m *ProcessAPI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessAPI.Unmarshal(m, b)
}
func (m *ProcessAPI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessAPI.Marshal(b, m, deterministic)
}
func (m *ProcessAPI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessAPI.Merge(m, src)
}
func (m *ProcessAPI) XXX_Size() int {
	return xxx_messageInfo_ProcessAPI.Size(m)
}
func (m *ProcessAPI) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessAPI.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessAPI proto.InternalMessageInfo

func (m *ProcessAPI) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProcessAPI) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProcessAPI) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ProcessAPI) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *ProcessAPI) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *ProcessAPI) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

// Create new process using template
type NewProcessReq struct {
	Call                 *Call    `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewProcessReq) Reset()         { *m = NewProcessReq{} }
func (m *NewProcessReq) String() string { return proto.CompactTextString(m) }
func (*NewProcessReq) ProtoMessage()    {}
func (*NewProcessReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{3}
}

func (m *NewProcessReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewProcessReq.Unmarshal(m, b)
}
func (m *NewProcessReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewProcessReq.Marshal(b, m, deterministic)
}
func (m *NewProcessReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewProcessReq.Merge(m, src)
}
func (m *NewProcessReq) XXX_Size() int {
	return xxx_messageInfo_NewProcessReq.Size(m)
}
func (m *NewProcessReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NewProcessReq.DiscardUnknown(m)
}

var xxx_messageInfo_NewProcessReq proto.InternalMessageInfo

func (m *NewProcessReq) GetCall() *Call {
	if m != nil {
		return m.Call
	}
	return nil
}

// Create new process directly
type PutProcessReq struct {
	Process              *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutProcessReq) Reset()         { *m = PutProcessReq{} }
func (m *PutProcessReq) String() string { return proto.CompactTextString(m) }
func (*PutProcessReq) ProtoMessage()    {}
func (*PutProcessReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{4}
}

func (m *PutProcessReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutProcessReq.Unmarshal(m, b)
}
func (m *PutProcessReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutProcessReq.Marshal(b, m, deterministic)
}
func (m *PutProcessReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutProcessReq.Merge(m, src)
}
func (m *PutProcessReq) XXX_Size() int {
	return xxx_messageInfo_PutProcessReq.Size(m)
}
func (m *PutProcessReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutProcessReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutProcessReq proto.InternalMessageInfo

func (m *PutProcessReq) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

// Update existing process
type UpdateProcessReq struct {
	Process              *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	LockId               uint64   `protobuf:"varint,2,opt,name=lockId,proto3" json:"lockId,omitempty"`
	UnblockedAt          uint64   `protobuf:"varint,3,opt,name=unblockedAt,proto3" json:"unblockedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateProcessReq) Reset()         { *m = UpdateProcessReq{} }
func (m *UpdateProcessReq) String() string { return proto.CompactTextString(m) }
func (*UpdateProcessReq) ProtoMessage()    {}
func (*UpdateProcessReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{5}
}

func (m *UpdateProcessReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateProcessReq.Unmarshal(m, b)
}
func (m *UpdateProcessReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateProcessReq.Marshal(b, m, deterministic)
}
func (m *UpdateProcessReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProcessReq.Merge(m, src)
}
func (m *UpdateProcessReq) XXX_Size() int {
	return xxx_messageInfo_UpdateProcessReq.Size(m)
}
func (m *UpdateProcessReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProcessReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProcessReq proto.InternalMessageInfo

func (m *UpdateProcessReq) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *UpdateProcessReq) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

func (m *UpdateProcessReq) GetUnblockedAt() uint64 {
	if m != nil {
		return m.UnblockedAt
	}
	return 0
}

type Select struct {
	Cases []*Case `protobuf:"bytes,1,rep,name=cases,proto3" json:"cases,omitempty"`
	// filled after unblocked
	UnblockedCase        uint64        `protobuf:"varint,2,opt,name=unblockedCase,proto3" json:"unblockedCase,omitempty"`
	RecvData             []byte        `protobuf:"bytes,3,opt,name=recvData,proto3" json:"recvData,omitempty"`
	Result               Select_Result `protobuf:"varint,4,opt,name=result,proto3,enum=async.Select_Result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Select) Reset()         { *m = Select{} }
func (m *Select) String() string { return proto.CompactTextString(m) }
func (*Select) ProtoMessage()    {}
func (*Select) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{6}
}

func (m *Select) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Select.Unmarshal(m, b)
}
func (m *Select) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Select.Marshal(b, m, deterministic)
}
func (m *Select) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Select.Merge(m, src)
}
func (m *Select) XXX_Size() int {
	return xxx_messageInfo_Select.Size(m)
}
func (m *Select) XXX_DiscardUnknown() {
	xxx_messageInfo_Select.DiscardUnknown(m)
}

var xxx_messageInfo_Select proto.InternalMessageInfo

func (m *Select) GetCases() []*Case {
	if m != nil {
		return m.Cases
	}
	return nil
}

func (m *Select) GetUnblockedCase() uint64 {
	if m != nil {
		return m.UnblockedCase
	}
	return 0
}

func (m *Select) GetRecvData() []byte {
	if m != nil {
		return m.RecvData
	}
	return nil
}

func (m *Select) GetResult() Select_Result {
	if m != nil {
		return m.Result
	}
	return Select_Invalid
}

type Case struct {
	ToStatus             string   `protobuf:"bytes,1,opt,name=toStatus,proto3" json:"toStatus,omitempty"`
	Op                   Case_Op  `protobuf:"varint,2,opt,name=op,proto3,enum=async.Case_Op" json:"op,omitempty"`
	Chan                 string   `protobuf:"bytes,3,opt,name=chan,proto3" json:"chan,omitempty"`
	Time                 uint64   `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	DataType             string   `protobuf:"bytes,6,opt,name=dataType,proto3" json:"dataType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Case) Reset()         { *m = Case{} }
func (m *Case) String() string { return proto.CompactTextString(m) }
func (*Case) ProtoMessage()    {}
func (*Case) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{7}
}

func (m *Case) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Case.Unmarshal(m, b)
}
func (m *Case) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Case.Marshal(b, m, deterministic)
}
func (m *Case) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Case.Merge(m, src)
}
func (m *Case) XXX_Size() int {
	return xxx_messageInfo_Case.Size(m)
}
func (m *Case) XXX_DiscardUnknown() {
	xxx_messageInfo_Case.DiscardUnknown(m)
}

var xxx_messageInfo_Case proto.InternalMessageInfo

func (m *Case) GetToStatus() string {
	if m != nil {
		return m.ToStatus
	}
	return ""
}

func (m *Case) GetOp() Case_Op {
	if m != nil {
		return m.Op
	}
	return Case_Invalid
}

func (m *Case) GetChan() string {
	if m != nil {
		return m.Chan
	}
	return ""
}

func (m *Case) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Case) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Case) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

type Call struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Input      []byte `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	InputType  string `protobuf:"bytes,4,opt,name=inputType,proto3" json:"inputType,omitempty"`
	OutputType string `protobuf:"bytes,5,opt,name=outputType,proto3" json:"outputType,omitempty"`
	// filled after unblocked
	Output               []byte   `protobuf:"bytes,6,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Call) Reset()         { *m = Call{} }
func (m *Call) String() string { return proto.CompactTextString(m) }
func (*Call) ProtoMessage()    {}
func (*Call) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{8}
}

func (m *Call) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Call.Unmarshal(m, b)
}
func (m *Call) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Call.Marshal(b, m, deterministic)
}
func (m *Call) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Call.Merge(m, src)
}
func (m *Call) XXX_Size() int {
	return xxx_messageInfo_Call.Size(m)
}
func (m *Call) XXX_DiscardUnknown() {
	xxx_messageInfo_Call.DiscardUnknown(m)
}

var xxx_messageInfo_Call proto.InternalMessageInfo

func (m *Call) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Call) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Call) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Call) GetInputType() string {
	if m != nil {
		return m.InputType
	}
	return ""
}

func (m *Call) GetOutputType() string {
	if m != nil {
		return m.OutputType
	}
	return ""
}

func (m *Call) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

type Thread struct {
	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Process     string        `protobuf:"bytes,2,opt,name=process,proto3" json:"process,omitempty"`
	Service     string        `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	Status      Thread_Status `protobuf:"varint,6,opt,name=status,proto3,enum=async.Thread_Status" json:"status,omitempty"`
	Select      *Select       `protobuf:"bytes,5,opt,name=select,proto3" json:"select,omitempty"`
	Call        *Call         `protobuf:"bytes,12,opt,name=call,proto3" json:"call,omitempty"`
	BlockedAt   uint64        `protobuf:"varint,8,opt,name=blockedAt,proto3" json:"blockedAt,omitempty"`
	UnblockedAt uint64        `protobuf:"varint,9,opt,name=unblockedAt,proto3" json:"unblockedAt,omitempty"`
	// filled after unblocked
	ToStatus             string   `protobuf:"bytes,13,opt,name=toStatus,proto3" json:"toStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Thread) Reset()         { *m = Thread{} }
func (m *Thread) String() string { return proto.CompactTextString(m) }
func (*Thread) ProtoMessage()    {}
func (*Thread) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{9}
}

func (m *Thread) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Thread.Unmarshal(m, b)
}
func (m *Thread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Thread.Marshal(b, m, deterministic)
}
func (m *Thread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thread.Merge(m, src)
}
func (m *Thread) XXX_Size() int {
	return xxx_messageInfo_Thread.Size(m)
}
func (m *Thread) XXX_DiscardUnknown() {
	xxx_messageInfo_Thread.DiscardUnknown(m)
}

var xxx_messageInfo_Thread proto.InternalMessageInfo

func (m *Thread) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Thread) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

func (m *Thread) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Thread) GetStatus() Thread_Status {
	if m != nil {
		return m.Status
	}
	return Thread_Invalid
}

func (m *Thread) GetSelect() *Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *Thread) GetCall() *Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (m *Thread) GetBlockedAt() uint64 {
	if m != nil {
		return m.BlockedAt
	}
	return 0
}

func (m *Thread) GetUnblockedAt() uint64 {
	if m != nil {
		return m.UnblockedAt
	}
	return 0
}

func (m *Thread) GetToStatus() string {
	if m != nil {
		return m.ToStatus
	}
	return ""
}

type Channel struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DataType             string   `protobuf:"bytes,2,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Closed               bool     `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	BufSize              uint64   `protobuf:"varint,4,opt,name=bufSize,proto3" json:"bufSize,omitempty"`
	BufMaxSize           uint64   `protobuf:"varint,5,opt,name=bufMaxSize,proto3" json:"bufMaxSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{10}
}

func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Channel) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *Channel) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

func (m *Channel) GetBufSize() uint64 {
	if m != nil {
		return m.BufSize
	}
	return 0
}

func (m *Channel) GetBufMaxSize() uint64 {
	if m != nil {
		return m.BufMaxSize
	}
	return 0
}

type ChanSelect struct {
	BlockedAt            uint64   `protobuf:"varint,1,opt,name=blockedAt,proto3" json:"blockedAt,omitempty"`
	Case                 uint64   `protobuf:"varint,2,opt,name=case,proto3" json:"case,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChanSelect) Reset()         { *m = ChanSelect{} }
func (m *ChanSelect) String() string { return proto.CompactTextString(m) }
func (*ChanSelect) ProtoMessage()    {}
func (*ChanSelect) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{11}
}

func (m *ChanSelect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChanSelect.Unmarshal(m, b)
}
func (m *ChanSelect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChanSelect.Marshal(b, m, deterministic)
}
func (m *ChanSelect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChanSelect.Merge(m, src)
}
func (m *ChanSelect) XXX_Size() int {
	return xxx_messageInfo_ChanSelect.Size(m)
}
func (m *ChanSelect) XXX_DiscardUnknown() {
	xxx_messageInfo_ChanSelect.DiscardUnknown(m)
}

var xxx_messageInfo_ChanSelect proto.InternalMessageInfo

func (m *ChanSelect) GetBlockedAt() uint64 {
	if m != nil {
		return m.BlockedAt
	}
	return 0
}

func (m *ChanSelect) GetCase() uint64 {
	if m != nil {
		return m.Case
	}
	return 0
}

type WaitCallIndex struct {
	BlockedAt            uint64   `protobuf:"varint,1,opt,name=blockedAt,proto3" json:"blockedAt,omitempty"`
	ProcessesId          string   `protobuf:"bytes,2,opt,name=processesId,proto3" json:"processesId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitCallIndex) Reset()         { *m = WaitCallIndex{} }
func (m *WaitCallIndex) String() string { return proto.CompactTextString(m) }
func (*WaitCallIndex) ProtoMessage()    {}
func (*WaitCallIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{12}
}

func (m *WaitCallIndex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitCallIndex.Unmarshal(m, b)
}
func (m *WaitCallIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitCallIndex.Marshal(b, m, deterministic)
}
func (m *WaitCallIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitCallIndex.Merge(m, src)
}
func (m *WaitCallIndex) XXX_Size() int {
	return xxx_messageInfo_WaitCallIndex.Size(m)
}
func (m *WaitCallIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitCallIndex.DiscardUnknown(m)
}

var xxx_messageInfo_WaitCallIndex proto.InternalMessageInfo

func (m *WaitCallIndex) GetBlockedAt() uint64 {
	if m != nil {
		return m.BlockedAt
	}
	return 0
}

func (m *WaitCallIndex) GetProcessesId() string {
	if m != nil {
		return m.ProcessesId
	}
	return ""
}

type BufData struct {
	//string Process     = 1;
	//string Select    = 2;
	//string Group     = 3;
	//string ToStatus  = 4;
	Chan                 string   `protobuf:"bytes,1,opt,name=Chan,proto3" json:"Chan,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	Clock                uint64   `protobuf:"varint,6,opt,name=clock,proto3" json:"clock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BufData) Reset()         { *m = BufData{} }
func (m *BufData) String() string { return proto.CompactTextString(m) }
func (*BufData) ProtoMessage()    {}
func (*BufData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{13}
}

func (m *BufData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BufData.Unmarshal(m, b)
}
func (m *BufData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BufData.Marshal(b, m, deterministic)
}
func (m *BufData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufData.Merge(m, src)
}
func (m *BufData) XXX_Size() int {
	return xxx_messageInfo_BufData.Size(m)
}
func (m *BufData) XXX_DiscardUnknown() {
	xxx_messageInfo_BufData.DiscardUnknown(m)
}

var xxx_messageInfo_BufData proto.InternalMessageInfo

func (m *BufData) GetChan() string {
	if m != nil {
		return m.Chan
	}
	return ""
}

func (m *BufData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BufData) GetClock() uint64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{14}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type RegisterProcessHandlerReq struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Pool                 int64    `protobuf:"varint,2,opt,name=pool,proto3" json:"pool,omitempty"`
	PollIntervalMs       int64    `protobuf:"varint,3,opt,name=pollIntervalMs,proto3" json:"pollIntervalMs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterProcessHandlerReq) Reset()         { *m = RegisterProcessHandlerReq{} }
func (m *RegisterProcessHandlerReq) String() string { return proto.CompactTextString(m) }
func (*RegisterProcessHandlerReq) ProtoMessage()    {}
func (*RegisterProcessHandlerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{15}
}

func (m *RegisterProcessHandlerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterProcessHandlerReq.Unmarshal(m, b)
}
func (m *RegisterProcessHandlerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterProcessHandlerReq.Marshal(b, m, deterministic)
}
func (m *RegisterProcessHandlerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterProcessHandlerReq.Merge(m, src)
}
func (m *RegisterProcessHandlerReq) XXX_Size() int {
	return xxx_messageInfo_RegisterProcessHandlerReq.Size(m)
}
func (m *RegisterProcessHandlerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterProcessHandlerReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterProcessHandlerReq proto.InternalMessageInfo

func (m *RegisterProcessHandlerReq) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *RegisterProcessHandlerReq) GetPool() int64 {
	if m != nil {
		return m.Pool
	}
	return 0
}

func (m *RegisterProcessHandlerReq) GetPollIntervalMs() int64 {
	if m != nil {
		return m.PollIntervalMs
	}
	return 0
}

type LockedProcess struct {
	Process              *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Thread               *Thread  `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
	LockId               uint64   `protobuf:"varint,3,opt,name=lockId,proto3" json:"lockId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockedProcess) Reset()         { *m = LockedProcess{} }
func (m *LockedProcess) String() string { return proto.CompactTextString(m) }
func (*LockedProcess) ProtoMessage()    {}
func (*LockedProcess) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{16}
}

func (m *LockedProcess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockedProcess.Unmarshal(m, b)
}
func (m *LockedProcess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockedProcess.Marshal(b, m, deterministic)
}
func (m *LockedProcess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedProcess.Merge(m, src)
}
func (m *LockedProcess) XXX_Size() int {
	return xxx_messageInfo_LockedProcess.Size(m)
}
func (m *LockedProcess) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedProcess.DiscardUnknown(m)
}

var xxx_messageInfo_LockedProcess proto.InternalMessageInfo

func (m *LockedProcess) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *LockedProcess) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

func (m *LockedProcess) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

type MakeChanReq struct {
	Chan                 *Channel `protobuf:"bytes,1,opt,name=chan,proto3" json:"chan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MakeChanReq) Reset()         { *m = MakeChanReq{} }
func (m *MakeChanReq) String() string { return proto.CompactTextString(m) }
func (*MakeChanReq) ProtoMessage()    {}
func (*MakeChanReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{17}
}

func (m *MakeChanReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MakeChanReq.Unmarshal(m, b)
}
func (m *MakeChanReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MakeChanReq.Marshal(b, m, deterministic)
}
func (m *MakeChanReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MakeChanReq.Merge(m, src)
}
func (m *MakeChanReq) XXX_Size() int {
	return xxx_messageInfo_MakeChanReq.Size(m)
}
func (m *MakeChanReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MakeChanReq.DiscardUnknown(m)
}

var xxx_messageInfo_MakeChanReq proto.InternalMessageInfo

func (m *MakeChanReq) GetChan() *Channel {
	if m != nil {
		return m.Chan
	}
	return nil
}

type CloseChanReq struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseChanReq) Reset()         { *m = CloseChanReq{} }
func (m *CloseChanReq) String() string { return proto.CompactTextString(m) }
func (*CloseChanReq) ProtoMessage()    {}
func (*CloseChanReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{18}
}

func (m *CloseChanReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseChanReq.Unmarshal(m, b)
}
func (m *CloseChanReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseChanReq.Marshal(b, m, deterministic)
}
func (m *CloseChanReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseChanReq.Merge(m, src)
}
func (m *CloseChanReq) XXX_Size() int {
	return xxx_messageInfo_CloseChanReq.Size(m)
}
func (m *CloseChanReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseChanReq.DiscardUnknown(m)
}

var xxx_messageInfo_CloseChanReq proto.InternalMessageInfo

func (m *CloseChanReq) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ListChansReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Limit                uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListChansReq) Reset()         { *m = ListChansReq{} }
func (m *ListChansReq) String() string { return proto.CompactTextString(m) }
func (*ListChansReq) ProtoMessage()    {}
func (*ListChansReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{19}
}

func (m *ListChansReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListChansReq.Unmarshal(m, b)
}
func (m *ListChansReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListChansReq.Marshal(b, m, deterministic)
}
func (m *ListChansReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChansReq.Merge(m, src)
}
func (m *ListChansReq) XXX_Size() int {
	return xxx_messageInfo_ListChansReq.Size(m)
}
func (m *ListChansReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChansReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListChansReq proto.InternalMessageInfo

func (m *ListChansReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ListChansReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ListChansReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListChansResp struct {
	Chans                []*Channel `protobuf:"bytes,1,rep,name=chans,proto3" json:"chans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListChansResp) Reset()         { *m = ListChansResp{} }
func (m *ListChansResp) String() string { return proto.CompactTextString(m) }
func (*ListChansResp) ProtoMessage()    {}
func (*ListChansResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{20}
}

func (m *ListChansResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListChansResp.Unmarshal(m, b)
}
func (m *ListChansResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListChansResp.Marshal(b, m, deterministic)
}
func (m *ListChansResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChansResp.Merge(m, src)
}
func (m *ListChansResp) XXX_Size() int {
	return xxx_messageInfo_ListChansResp.Size(m)
}
func (m *ListChansResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChansResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListChansResp proto.InternalMessageInfo

func (m *ListChansResp) GetChans() []*Channel {
	if m != nil {
		return m.Chans
	}
	return nil
}

type ListTypesReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Limit                uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTypesReq) Reset()         { *m = ListTypesReq{} }
func (m *ListTypesReq) String() string { return proto.CompactTextString(m) }
func (*ListTypesReq) ProtoMessage()    {}
func (*ListTypesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{21}
}

func (m *ListTypesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTypesReq.Unmarshal(m, b)
}
func (m *ListTypesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTypesReq.Marshal(b, m, deterministic)
}
func (m *ListTypesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTypesReq.Merge(m, src)
}
func (m *ListTypesReq) XXX_Size() int {
	return xxx_messageInfo_ListTypesReq.Size(m)
}
func (m *ListTypesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTypesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListTypesReq proto.InternalMessageInfo

func (m *ListTypesReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ListTypesReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ListTypesReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListTypesResp struct {
	Types                []*Type  `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTypesResp) Reset()         { *m = ListTypesResp{} }
func (m *ListTypesResp) String() string { return proto.CompactTextString(m) }
func (*ListTypesResp) ProtoMessage()    {}
func (*ListTypesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{22}
}

func (m *ListTypesResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTypesResp.Unmarshal(m, b)
}
func (m *ListTypesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTypesResp.Marshal(b, m, deterministic)
}
func (m *ListTypesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTypesResp.Merge(m, src)
}
func (m *ListTypesResp) XXX_Size() int {
	return xxx_messageInfo_ListTypesResp.Size(m)
}
func (m *ListTypesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTypesResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListTypesResp proto.InternalMessageInfo

func (m *ListTypesResp) GetTypes() []*Type {
	if m != nil {
		return m.Types
	}
	return nil
}

type ListAPIsReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Limit                uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAPIsReq) Reset()         { *m = ListAPIsReq{} }
func (m *ListAPIsReq) String() string { return proto.CompactTextString(m) }
func (*ListAPIsReq) ProtoMessage()    {}
func (*ListAPIsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{23}
}

func (m *ListAPIsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAPIsReq.Unmarshal(m, b)
}
func (m *ListAPIsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAPIsReq.Marshal(b, m, deterministic)
}
func (m *ListAPIsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAPIsReq.Merge(m, src)
}
func (m *ListAPIsReq) XXX_Size() int {
	return xxx_messageInfo_ListAPIsReq.Size(m)
}
func (m *ListAPIsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAPIsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListAPIsReq proto.InternalMessageInfo

func (m *ListAPIsReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ListAPIsReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ListAPIsReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListAPIsResp struct {
	Apis                 []*ProcessAPI `protobuf:"bytes,1,rep,name=apis,proto3" json:"apis,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListAPIsResp) Reset()         { *m = ListAPIsResp{} }
func (m *ListAPIsResp) String() string { return proto.CompactTextString(m) }
func (*ListAPIsResp) ProtoMessage()    {}
func (*ListAPIsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{24}
}

func (m *ListAPIsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAPIsResp.Unmarshal(m, b)
}
func (m *ListAPIsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAPIsResp.Marshal(b, m, deterministic)
}
func (m *ListAPIsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAPIsResp.Merge(m, src)
}
func (m *ListAPIsResp) XXX_Size() int {
	return xxx_messageInfo_ListAPIsResp.Size(m)
}
func (m *ListAPIsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAPIsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListAPIsResp proto.InternalMessageInfo

func (m *ListAPIsResp) GetApis() []*ProcessAPI {
	if m != nil {
		return m.Apis
	}
	return nil
}

type GetProcessReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProcessReq) Reset()         { *m = GetProcessReq{} }
func (m *GetProcessReq) String() string { return proto.CompactTextString(m) }
func (*GetProcessReq) ProtoMessage()    {}
func (*GetProcessReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{25}
}

func (m *GetProcessReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProcessReq.Unmarshal(m, b)
}
func (m *GetProcessReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProcessReq.Marshal(b, m, deterministic)
}
func (m *GetProcessReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProcessReq.Merge(m, src)
}
func (m *GetProcessReq) XXX_Size() int {
	return xxx_messageInfo_GetProcessReq.Size(m)
}
func (m *GetProcessReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProcessReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetProcessReq proto.InternalMessageInfo

func (m *GetProcessReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type LockProcessReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockProcessReq) Reset()         { *m = LockProcessReq{} }
func (m *LockProcessReq) String() string { return proto.CompactTextString(m) }
func (*LockProcessReq) ProtoMessage()    {}
func (*LockProcessReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{26}
}

func (m *LockProcessReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockProcessReq.Unmarshal(m, b)
}
func (m *LockProcessReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockProcessReq.Marshal(b, m, deterministic)
}
func (m *LockProcessReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockProcessReq.Merge(m, src)
}
func (m *LockProcessReq) XXX_Size() int {
	return xxx_messageInfo_LockProcessReq.Size(m)
}
func (m *LockProcessReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LockProcessReq.DiscardUnknown(m)
}

var xxx_messageInfo_LockProcessReq proto.InternalMessageInfo

func (m *LockProcessReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListenProcessesUpdatesReq struct {
	From                 uint64   `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	Service              string   `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenProcessesUpdatesReq) Reset()         { *m = ListenProcessesUpdatesReq{} }
func (m *ListenProcessesUpdatesReq) String() string { return proto.CompactTextString(m) }
func (*ListenProcessesUpdatesReq) ProtoMessage()    {}
func (*ListenProcessesUpdatesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{27}
}

func (m *ListenProcessesUpdatesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenProcessesUpdatesReq.Unmarshal(m, b)
}
func (m *ListenProcessesUpdatesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenProcessesUpdatesReq.Marshal(b, m, deterministic)
}
func (m *ListenProcessesUpdatesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenProcessesUpdatesReq.Merge(m, src)
}
func (m *ListenProcessesUpdatesReq) XXX_Size() int {
	return xxx_messageInfo_ListenProcessesUpdatesReq.Size(m)
}
func (m *ListenProcessesUpdatesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenProcessesUpdatesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListenProcessesUpdatesReq proto.InternalMessageInfo

func (m *ListenProcessesUpdatesReq) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *ListenProcessesUpdatesReq) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type ProcessEvent struct {
	Process              *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Thread               *Thread  `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessEvent) Reset()         { *m = ProcessEvent{} }
func (m *ProcessEvent) String() string { return proto.CompactTextString(m) }
func (*ProcessEvent) ProtoMessage()    {}
func (*ProcessEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{28}
}

func (m *ProcessEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessEvent.Unmarshal(m, b)
}
func (m *ProcessEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessEvent.Marshal(b, m, deterministic)
}
func (m *ProcessEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessEvent.Merge(m, src)
}
func (m *ProcessEvent) XXX_Size() int {
	return xxx_messageInfo_ProcessEvent.Size(m)
}
func (m *ProcessEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessEvent proto.InternalMessageInfo

func (m *ProcessEvent) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *ProcessEvent) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

func init() {
	proto.RegisterEnum("async.Process_Status", Process_Status_name, Process_Status_value)
	proto.RegisterEnum("async.Select_Result", Select_Result_name, Select_Result_value)
	proto.RegisterEnum("async.Case_Op", Case_Op_name, Case_Op_value)
	proto.RegisterEnum("async.Thread_Status", Thread_Status_name, Thread_Status_value)
	proto.RegisterType((*Process)(nil), "async.Process")
	proto.RegisterType((*Type)(nil), "async.Type")
	proto.RegisterType((*ProcessAPI)(nil), "async.ProcessAPI")
	proto.RegisterType((*NewProcessReq)(nil), "async.NewProcessReq")
	proto.RegisterType((*PutProcessReq)(nil), "async.PutProcessReq")
	proto.RegisterType((*UpdateProcessReq)(nil), "async.UpdateProcessReq")
	proto.RegisterType((*Select)(nil), "async.Select")
	proto.RegisterType((*Case)(nil), "async.Case")
	proto.RegisterType((*Call)(nil), "async.Call")
	proto.RegisterType((*Thread)(nil), "async.Thread")
	proto.RegisterType((*Channel)(nil), "async.Channel")
	proto.RegisterType((*ChanSelect)(nil), "async.ChanSelect")
	proto.RegisterType((*WaitCallIndex)(nil), "async.WaitCallIndex")
	proto.RegisterType((*BufData)(nil), "async.BufData")
	proto.RegisterType((*Empty)(nil), "async.Empty")
	proto.RegisterType((*RegisterProcessHandlerReq)(nil), "async.RegisterProcessHandlerReq")
	proto.RegisterType((*LockedProcess)(nil), "async.LockedProcess")
	proto.RegisterType((*MakeChanReq)(nil), "async.MakeChanReq")
	proto.RegisterType((*CloseChanReq)(nil), "async.CloseChanReq")
	proto.RegisterType((*ListChansReq)(nil), "async.ListChansReq")
	proto.RegisterType((*ListChansResp)(nil), "async.ListChansResp")
	proto.RegisterType((*ListTypesReq)(nil), "async.ListTypesReq")
	proto.RegisterType((*ListTypesResp)(nil), "async.ListTypesResp")
	proto.RegisterType((*ListAPIsReq)(nil), "async.ListAPIsReq")
	proto.RegisterType((*ListAPIsResp)(nil), "async.ListAPIsResp")
	proto.RegisterType((*GetProcessReq)(nil), "async.GetProcessReq")
	proto.RegisterType((*LockProcessReq)(nil), "async.LockProcessReq")
	proto.RegisterType((*ListenProcessesUpdatesReq)(nil), "async.ListenProcessesUpdatesReq")
	proto.RegisterType((*ProcessEvent)(nil), "async.ProcessEvent")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 1394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5f, 0x8f, 0xdb, 0x44,
	0x10, 0xc7, 0x8e, 0xe3, 0x24, 0x93, 0xe4, 0x14, 0xb6, 0x47, 0x49, 0x4f, 0x55, 0x1b, 0x56, 0x2d,
	0x5c, 0xa5, 0x72, 0x3a, 0xae, 0x02, 0x09, 0x04, 0x95, 0xae, 0xd7, 0xd2, 0x46, 0xb4, 0x5c, 0xd8,
	0x6b, 0xc5, 0x23, 0xf2, 0xd9, 0x7b, 0x3d, 0x53, 0xc7, 0x76, 0xfd, 0x27, 0xf4, 0xf8, 0x02, 0xbc,
	0xf2, 0xc4, 0x33, 0x9f, 0x86, 0xcf, 0x80, 0x78, 0xe0, 0xb3, 0xa0, 0x9d, 0xdd, 0xb5, 0xd7, 0xce,
	0x1d, 0xad, 0x28, 0x4f, 0xd9, 0x99, 0xd9, 0xf1, 0xfc, 0xd9, 0xdf, 0x6f, 0x76, 0x03, 0xc3, 0xe2,
	0x2c, 0xe5, 0xf9, 0x4e, 0x9a, 0x25, 0x45, 0x42, 0xba, 0x5e, 0x7e, 0x16, 0xfb, 0xf4, 0x2f, 0x1b,
	0x7a, 0x8b, 0x2c, 0xf1, 0x79, 0x9e, 0x93, 0x0d, 0xb0, 0xc3, 0x60, 0x6a, 0xcd, 0xac, 0xed, 0x01,
	0xb3, 0xc3, 0x80, 0x10, 0x70, 0x62, 0x6f, 0xc9, 0xa7, 0x36, 0x6a, 0x70, 0x4d, 0xa6, 0xd0, 0xcb,
	0x79, 0xb6, 0x0a, 0x7d, 0x3e, 0xed, 0xa0, 0x5a, 0x8b, 0xe4, 0x63, 0x70, 0xf3, 0xc2, 0x2b, 0xca,
	0x7c, 0xea, 0xcc, 0xac, 0xed, 0x8d, 0xbd, 0xf7, 0x76, 0x30, 0xc2, 0x8e, 0xfa, 0xfa, 0xce, 0x11,
	0x1a, 0x99, 0xda, 0x44, 0x3e, 0x82, 0x5e, 0x71, 0x9a, 0x71, 0x2f, 0xc8, 0xa7, 0xdd, 0x59, 0x67,
	0x7b, 0xb8, 0x37, 0x56, 0xfb, 0x9f, 0xa2, 0x96, 0x69, 0x2b, 0xd9, 0x84, 0xae, 0x70, 0xe1, 0x53,
	0x77, 0x66, 0x6d, 0x8f, 0x98, 0x14, 0x84, 0x36, 0x8c, 0xd3, 0xb2, 0x98, 0xf6, 0xa4, 0x16, 0x05,
	0x72, 0x19, 0xdc, 0xa4, 0x2c, 0x84, 0xba, 0x8f, 0x6a, 0x25, 0x89, 0xac, 0x57, 0x3c, 0xcb, 0xc3,
	0x24, 0x9e, 0x0e, 0x66, 0xd6, 0xb6, 0xc3, 0xb4, 0x48, 0xae, 0xc2, 0xa0, 0x4c, 0x03, 0xaf, 0xe0,
	0xc1, 0x7e, 0x31, 0x05, 0xb4, 0xd5, 0x0a, 0xfa, 0x15, 0xb8, 0x32, 0x6d, 0x32, 0x84, 0xde, 0x3c,
	0x5e, 0x79, 0x51, 0x18, 0x4c, 0xde, 0x11, 0xc2, 0x51, 0xe1, 0x65, 0x05, 0x0f, 0x26, 0x96, 0x10,
	0x58, 0x19, 0xc7, 0x61, 0xfc, 0x7c, 0x62, 0x93, 0x11, 0xf4, 0xbf, 0x0e, 0xe3, 0x30, 0x3f, 0xe5,
	0xc1, 0xa4, 0x43, 0x33, 0x70, 0x9e, 0x9e, 0xa5, 0x7c, 0xad, 0xb1, 0x33, 0x18, 0x06, 0x3c, 0xf7,
	0xb3, 0x30, 0x2d, 0x44, 0x4a, 0xb2, 0xbf, 0xa6, 0x8a, 0x5c, 0x03, 0xf8, 0x31, 0x4f, 0xe2, 0x23,
	0xff, 0x94, 0x2f, 0x3d, 0xec, 0xf4, 0x88, 0x19, 0x1a, 0xb3, 0x20, 0xa7, 0x51, 0x10, 0xfd, 0xdd,
	0x02, 0x50, 0x2d, 0xdf, 0x5f, 0xcc, 0xab, 0x33, 0xb4, 0x8c, 0x33, 0x7c, 0x7d, 0xf8, 0x8b, 0x4f,
	0xb9, 0xea, 0xbb, 0x83, 0xfa, 0xb5, 0xbe, 0x77, 0x51, 0xad, 0xfb, 0xde, 0x38, 0xbb, 0x81, 0x3a,
	0x3b, 0xba, 0x0b, 0xe3, 0x6f, 0xf9, 0x4f, 0x2a, 0x49, 0xc6, 0x5f, 0x92, 0xeb, 0xe0, 0xf8, 0x5e,
	0x14, 0x61, 0x92, 0xc3, 0xbd, 0xa1, 0x02, 0xc2, 0x81, 0x17, 0x45, 0x0c, 0x0d, 0xf4, 0x73, 0x18,
	0x2f, 0xca, 0xc2, 0xf0, 0xd8, 0x86, 0x5e, 0x2a, 0x25, 0xe5, 0xb4, 0xd1, 0x44, 0x1b, 0xd3, 0x66,
	0xba, 0x82, 0xc9, 0x33, 0x3c, 0xcf, 0xff, 0xe2, 0x2d, 0x0a, 0x8b, 0x12, 0xff, 0xc5, 0x3c, 0xc0,
	0x2e, 0x39, 0x4c, 0x49, 0xa2, 0x85, 0x65, 0x7c, 0x2c, 0x04, 0x04, 0x4e, 0x07, 0x8d, 0xa6, 0x8a,
	0xfe, 0x61, 0x81, 0x7b, 0xc4, 0x23, 0xee, 0x17, 0xe4, 0x03, 0xe8, 0xfa, 0x5e, 0xce, 0x45, 0xb0,
	0x4e, 0xa3, 0xbe, 0x9c, 0x33, 0x69, 0x21, 0x37, 0x60, 0x5c, 0x39, 0x0b, 0xbd, 0x0a, 0xd7, 0x54,
	0x92, 0x2d, 0xe8, 0x67, 0xdc, 0x5f, 0xdd, 0xf7, 0x0a, 0x8d, 0x89, 0x4a, 0x26, 0xb7, 0xc1, 0xcd,
	0x78, 0x5e, 0x46, 0x85, 0xa2, 0xdf, 0xa6, 0x8a, 0x22, 0x73, 0xd8, 0x61, 0x68, 0x63, 0x6a, 0x0f,
	0xbd, 0x05, 0xae, 0xd4, 0x34, 0x81, 0xed, 0x82, 0x7d, 0xf8, 0xcd, 0xc4, 0x22, 0x00, 0xee, 0x41,
	0x94, 0xe4, 0x3c, 0x98, 0xd8, 0xf4, 0x4f, 0x0b, 0x1c, 0x1d, 0xbd, 0x48, 0x24, 0x1d, 0x14, 0x9c,
	0x2a, 0x99, 0x5c, 0x03, 0x3b, 0x49, 0x31, 0xe9, 0x8d, 0xaa, 0x99, 0xc2, 0x69, 0xe7, 0x30, 0x65,
	0x76, 0x92, 0x0a, 0x18, 0xfa, 0xa7, 0x5e, 0xac, 0xd0, 0x84, 0x6b, 0xa1, 0x2b, 0xc2, 0x25, 0x57,
	0x00, 0xc6, 0xb5, 0xd0, 0x05, 0xa2, 0xba, 0x2e, 0x56, 0x87, 0x6b, 0x11, 0x57, 0xfc, 0x0a, 0x26,
	0x29, 0x1c, 0x55, 0x32, 0xfd, 0x12, 0xec, 0xc3, 0xb4, 0x59, 0x43, 0x1f, 0x9c, 0x23, 0x1e, 0x0b,
	0x66, 0xf6, 0xc1, 0x61, 0xdc, 0x5f, 0x4d, 0x6c, 0xb1, 0x7a, 0x1a, 0x2e, 0xf9, 0xa4, 0x23, 0xb6,
	0xde, 0xe7, 0x27, 0x5e, 0x19, 0x15, 0x93, 0x2e, 0xfd, 0x0d, 0x4b, 0x8b, 0xa2, 0x37, 0x9a, 0x7c,
	0x15, 0xf2, 0x3b, 0xe6, 0xc4, 0xb9, 0x0a, 0x03, 0x5c, 0x60, 0x76, 0x92, 0x13, 0xb5, 0x42, 0xd0,
	0x58, 0x32, 0x01, 0xcd, 0x92, 0x1b, 0x86, 0xc6, 0xe0, 0x8d, 0x6b, 0xce, 0x2b, 0xfa, 0xb7, 0x0d,
	0xae, 0x9c, 0x83, 0x6b, 0xa9, 0x4d, 0x6b, 0xec, 0xca, 0xec, 0x2a, 0xac, 0x1a, 0xa4, 0x75, 0x9a,
	0xa4, 0xbd, 0x5d, 0x8d, 0x66, 0xb7, 0x81, 0x0d, 0x19, 0xa2, 0x3d, 0x99, 0x6f, 0x82, 0x9b, 0x23,
	0x68, 0x30, 0xe1, 0x7a, 0x30, 0x4b, 0x24, 0x31, 0x65, 0xac, 0x48, 0x3b, 0xba, 0x80, 0xb4, 0xa2,
	0x35, 0x35, 0x43, 0xfa, 0x72, 0xb4, 0x56, 0x8a, 0x36, 0x83, 0x06, 0x6b, 0x0c, 0x6a, 0xe0, 0x6d,
	0xdc, 0xc4, 0x1b, 0xbd, 0x7b, 0xe1, 0x60, 0xbe, 0x27, 0xfd, 0x27, 0x16, 0x19, 0xc3, 0xe0, 0x99,
	0xfe, 0xdc, 0xc4, 0x16, 0xb6, 0xfd, 0xe3, 0x04, 0x87, 0x76, 0x87, 0xfe, 0x62, 0x41, 0xef, 0xe0,
	0xd4, 0x8b, 0x63, 0xbe, 0x7e, 0xf8, 0x26, 0xde, 0xec, 0x26, 0xde, 0xc4, 0x81, 0xf9, 0x48, 0x0c,
	0x44, 0x41, 0x9f, 0x29, 0x49, 0xf4, 0xfe, 0xb8, 0x3c, 0x39, 0x0a, 0x7f, 0xd6, 0x70, 0xd6, 0xa2,
	0x80, 0xc0, 0x71, 0x79, 0xf2, 0xc4, 0x7b, 0x85, 0xc6, 0x2e, 0x1a, 0x0d, 0x0d, 0xbd, 0x0b, 0x20,
	0x12, 0x51, 0xa3, 0xa2, 0xd1, 0x33, 0xab, 0xdd, 0x33, 0xc1, 0xa2, 0x7a, 0x38, 0xe0, 0x9a, 0x1e,
	0xc2, 0xf8, 0x7b, 0x2f, 0x2c, 0x44, 0xdf, 0xe7, 0x71, 0xc0, 0x5f, 0xbd, 0xe6, 0x13, 0x33, 0x18,
	0x2a, 0xbc, 0xf0, 0x5c, 0x4d, 0xb5, 0x01, 0x33, 0x55, 0xf4, 0x21, 0xf4, 0xee, 0x95, 0x27, 0x38,
	0x53, 0x08, 0x38, 0x22, 0x37, 0x7d, 0x79, 0x1c, 0x28, 0xd6, 0xde, 0x37, 0x18, 0x8a, 0xfb, 0x36,
	0xa1, 0xeb, 0x8b, 0x08, 0x08, 0x2f, 0x87, 0x49, 0x81, 0xf6, 0xa0, 0xfb, 0x60, 0x99, 0x16, 0x67,
	0xf4, 0x25, 0x5c, 0x61, 0xfc, 0x79, 0x98, 0x17, 0x3c, 0x53, 0x03, 0xf6, 0x91, 0x17, 0x07, 0x11,
	0xcf, 0xc4, 0x2c, 0x36, 0x50, 0x6b, 0x35, 0x51, 0x4b, 0xc0, 0x49, 0x93, 0x24, 0xc2, 0x1c, 0x3b,
	0x0c, 0xd7, 0xe4, 0x43, 0xd8, 0x48, 0x13, 0x51, 0x69, 0xc1, 0xb3, 0x95, 0x17, 0x3d, 0xc9, 0xf1,
	0x1c, 0x3a, 0xac, 0xa5, 0xa5, 0xaf, 0x60, 0xfc, 0x18, 0x4b, 0xd6, 0x6f, 0x9b, 0x37, 0x1f, 0xf9,
	0x37, 0xc1, 0x95, 0x4f, 0x0f, 0x0c, 0xbc, 0xf6, 0x2e, 0x51, 0x46, 0xe3, 0x66, 0xe8, 0x98, 0x37,
	0x03, 0xfd, 0x04, 0x86, 0x4f, 0xbc, 0x17, 0x5c, 0xf4, 0x4a, 0x94, 0x47, 0xd5, 0xe0, 0x6b, 0x06,
	0x55, 0xd0, 0x93, 0x83, 0x90, 0xce, 0x60, 0x84, 0xd3, 0x56, 0xfb, 0x4c, 0xa0, 0x13, 0x06, 0xf2,
	0xb6, 0x18, 0x30, 0xb1, 0xa4, 0x8f, 0x60, 0xf4, 0x38, 0xcc, 0x0b, 0xb1, 0x01, 0x2f, 0xb0, 0x73,
	0xe6, 0xd5, 0x49, 0x96, 0x2c, 0xf5, 0xbc, 0x12, 0x6b, 0x71, 0x28, 0x51, 0xb8, 0x0c, 0xf5, 0xe5,
	0x24, 0x05, 0xfa, 0x29, 0x8c, 0x8d, 0x2f, 0xe5, 0x29, 0xb9, 0x01, 0x5d, 0x91, 0x84, 0xbe, 0x9c,
	0xda, 0x19, 0x4a, 0xa3, 0x4e, 0x40, 0x70, 0xe0, 0x2d, 0x13, 0xd8, 0x93, 0x09, 0xa8, 0x2f, 0xe5,
	0xa9, 0xb8, 0x1d, 0xf1, 0x5d, 0xda, 0xba, 0x1d, 0xc5, 0x06, 0x26, 0x2d, 0xf4, 0x21, 0x0c, 0x85,
	0xcf, 0xfe, 0x62, 0xfe, 0xd6, 0xd5, 0x8f, 0xea, 0x0f, 0xe5, 0x29, 0xb9, 0x09, 0x8e, 0x97, 0x86,
	0x3a, 0xf4, 0xbb, 0x4d, 0x48, 0xec, 0x2f, 0xe6, 0x0c, 0xcd, 0xf4, 0x3a, 0x8c, 0x1f, 0x72, 0xf3,
	0xf9, 0xd1, 0xca, 0x80, 0xce, 0x60, 0x43, 0xc0, 0xed, 0x5f, 0x76, 0xcc, 0xe1, 0x8a, 0x88, 0xcc,
	0xe3, 0x85, 0xa6, 0x9a, 0x7c, 0x95, 0xe0, 0x66, 0x5d, 0x80, 0x64, 0xab, 0x2c, 0xc0, 0xe0, 0x85,
	0xdd, 0xe0, 0x05, 0xfd, 0x01, 0x46, 0xea, 0x23, 0x0f, 0x56, 0x3c, 0x2e, 0xfe, 0x77, 0x68, 0xef,
	0xfd, 0xea, 0xe2, 0x93, 0x16, 0x2f, 0xe4, 0x3d, 0x80, 0xba, 0x74, 0xa2, 0x2f, 0x8e, 0x46, 0x37,
	0xb6, 0x5a, 0xf1, 0xc8, 0x2e, 0x40, 0xfd, 0xbe, 0xab, 0x7c, 0x1a, 0x4f, 0xbe, 0xad, 0x91, 0xd2,
	0xe2, 0x84, 0x10, 0x1e, 0xf5, 0xfb, 0xae, 0xf2, 0x68, 0x3c, 0xf9, 0x5a, 0x1e, 0x9f, 0xc1, 0xb8,
	0xf1, 0xac, 0x23, 0xef, 0x2b, 0x73, 0xfb, 0xb1, 0xd7, 0xf2, 0xfb, 0x02, 0x86, 0xc6, 0x49, 0x11,
	0xfd, 0x27, 0xa5, 0x79, 0x7a, 0x5b, 0x9b, 0x86, 0xba, 0x9e, 0x21, 0xb7, 0xa1, 0xaf, 0xa9, 0x4d,
	0x88, 0xda, 0x61, 0x70, 0x7d, 0x2d, 0xc3, 0x41, 0xc5, 0x34, 0x72, 0x49, 0x7f, 0xd0, 0x60, 0x71,
	0x1d, 0xa5, 0x41, 0xc8, 0x1d, 0x18, 0x54, 0xd3, 0xa0, 0xf2, 0x33, 0xe7, 0x43, 0x2b, 0xce, 0x0d,
	0xe8, 0x2d, 0xd4, 0x73, 0xc2, 0xe4, 0xce, 0xf9, 0xd9, 0x20, 0xed, 0x1a, 0xd9, 0x68, 0x4a, 0x37,
	0xb2, 0xa9, 0xd9, 0x79, 0x0b, 0xdc, 0x45, 0x29, 0x08, 0x43, 0xd6, 0xd9, 0xd1, 0x0a, 0x71, 0x07,
	0xfa, 0x9a, 0x5c, 0x55, 0x7b, 0x0c, 0xda, 0x6e, 0x5d, 0x5a, 0xd3, 0xe5, 0x29, 0x61, 0x70, 0xf9,
	0xfc, 0xbb, 0x81, 0xcc, 0xd4, 0xf6, 0x0b, 0xaf, 0x8e, 0xf3, 0x4f, 0x69, 0xd7, 0x22, 0xdf, 0xc1,
	0xe5, 0xf3, 0xb9, 0x56, 0x7d, 0xf3, 0x42, 0x2a, 0x56, 0x49, 0x9a, 0x0c, 0xdb, 0xb5, 0x8e, 0x5d,
	0xfc, 0xd3, 0x7c, 0xe7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0xf5, 0xd4, 0xb4, 0x43, 0x0f,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RuntimeClient is the client API for Runtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuntimeClient interface {
	// Get current process
	GetProcess(ctx context.Context, in *GetProcessReq, opts ...grpc.CallOption) (*Process, error)
	NewProcess(ctx context.Context, in *NewProcessReq, opts ...grpc.CallOption) (*Empty, error)
	PutProcess(ctx context.Context, in *PutProcessReq, opts ...grpc.CallOption) (*Empty, error)
	UpdateProcess(ctx context.Context, in *UpdateProcessReq, opts ...grpc.CallOption) (*Empty, error)
	LockProcess(ctx context.Context, in *LockProcessReq, opts ...grpc.CallOption) (*LockedProcess, error)
	MakeChan(ctx context.Context, in *MakeChanReq, opts ...grpc.CallOption) (*Empty, error)
	ListChans(ctx context.Context, in *ListChansReq, opts ...grpc.CallOption) (*ListChansResp, error)
	CloseChan(ctx context.Context, in *CloseChanReq, opts ...grpc.CallOption) (*Empty, error)
	PutType(ctx context.Context, in *Type, opts ...grpc.CallOption) (*Empty, error)
	ListTypes(ctx context.Context, in *ListTypesReq, opts ...grpc.CallOption) (*ListTypesResp, error)
	PutAPI(ctx context.Context, in *ProcessAPI, opts ...grpc.CallOption) (*Empty, error)
	ListAPIs(ctx context.Context, in *ListAPIsReq, opts ...grpc.CallOption) (*ListAPIsResp, error)
	// Listen for unblocked states, process events and return updated states.
	RegisterProcessHandler(ctx context.Context, in *RegisterProcessHandlerReq, opts ...grpc.CallOption) (Runtime_RegisterProcessHandlerClient, error)
	// Listen for updates states. You can use this to sync data with other DB's, for ex. Search / Reports / etc.
	ListenProcessesUpdates(ctx context.Context, in *ListenProcessesUpdatesReq, opts ...grpc.CallOption) (Runtime_ListenProcessesUpdatesClient, error)
}

type runtimeClient struct {
	cc *grpc.ClientConn
}

func NewRuntimeClient(cc *grpc.ClientConn) RuntimeClient {
	return &runtimeClient{cc}
}

func (c *runtimeClient) GetProcess(ctx context.Context, in *GetProcessReq, opts ...grpc.CallOption) (*Process, error) {
	out := new(Process)
	err := c.cc.Invoke(ctx, "/async.Runtime/GetProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) NewProcess(ctx context.Context, in *NewProcessReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/async.Runtime/NewProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) PutProcess(ctx context.Context, in *PutProcessReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/async.Runtime/PutProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) UpdateProcess(ctx context.Context, in *UpdateProcessReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/async.Runtime/UpdateProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) LockProcess(ctx context.Context, in *LockProcessReq, opts ...grpc.CallOption) (*LockedProcess, error) {
	out := new(LockedProcess)
	err := c.cc.Invoke(ctx, "/async.Runtime/LockProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) MakeChan(ctx context.Context, in *MakeChanReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/async.Runtime/MakeChan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) ListChans(ctx context.Context, in *ListChansReq, opts ...grpc.CallOption) (*ListChansResp, error) {
	out := new(ListChansResp)
	err := c.cc.Invoke(ctx, "/async.Runtime/ListChans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) CloseChan(ctx context.Context, in *CloseChanReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/async.Runtime/CloseChan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) PutType(ctx context.Context, in *Type, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/async.Runtime/PutType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) ListTypes(ctx context.Context, in *ListTypesReq, opts ...grpc.CallOption) (*ListTypesResp, error) {
	out := new(ListTypesResp)
	err := c.cc.Invoke(ctx, "/async.Runtime/ListTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) PutAPI(ctx context.Context, in *ProcessAPI, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/async.Runtime/PutAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) ListAPIs(ctx context.Context, in *ListAPIsReq, opts ...grpc.CallOption) (*ListAPIsResp, error) {
	out := new(ListAPIsResp)
	err := c.cc.Invoke(ctx, "/async.Runtime/ListAPIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) RegisterProcessHandler(ctx context.Context, in *RegisterProcessHandlerReq, opts ...grpc.CallOption) (Runtime_RegisterProcessHandlerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Runtime_serviceDesc.Streams[0], "/async.Runtime/RegisterProcessHandler", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeRegisterProcessHandlerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runtime_RegisterProcessHandlerClient interface {
	Recv() (*LockedProcess, error)
	grpc.ClientStream
}

type runtimeRegisterProcessHandlerClient struct {
	grpc.ClientStream
}

func (x *runtimeRegisterProcessHandlerClient) Recv() (*LockedProcess, error) {
	m := new(LockedProcess)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeClient) ListenProcessesUpdates(ctx context.Context, in *ListenProcessesUpdatesReq, opts ...grpc.CallOption) (Runtime_ListenProcessesUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Runtime_serviceDesc.Streams[1], "/async.Runtime/ListenProcessesUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeListenProcessesUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runtime_ListenProcessesUpdatesClient interface {
	Recv() (*ProcessEvent, error)
	grpc.ClientStream
}

type runtimeListenProcessesUpdatesClient struct {
	grpc.ClientStream
}

func (x *runtimeListenProcessesUpdatesClient) Recv() (*ProcessEvent, error) {
	m := new(ProcessEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RuntimeServer is the server API for Runtime service.
type RuntimeServer interface {
	// Get current process
	GetProcess(context.Context, *GetProcessReq) (*Process, error)
	NewProcess(context.Context, *NewProcessReq) (*Empty, error)
	PutProcess(context.Context, *PutProcessReq) (*Empty, error)
	UpdateProcess(context.Context, *UpdateProcessReq) (*Empty, error)
	LockProcess(context.Context, *LockProcessReq) (*LockedProcess, error)
	MakeChan(context.Context, *MakeChanReq) (*Empty, error)
	ListChans(context.Context, *ListChansReq) (*ListChansResp, error)
	CloseChan(context.Context, *CloseChanReq) (*Empty, error)
	PutType(context.Context, *Type) (*Empty, error)
	ListTypes(context.Context, *ListTypesReq) (*ListTypesResp, error)
	PutAPI(context.Context, *ProcessAPI) (*Empty, error)
	ListAPIs(context.Context, *ListAPIsReq) (*ListAPIsResp, error)
	// Listen for unblocked states, process events and return updated states.
	RegisterProcessHandler(*RegisterProcessHandlerReq, Runtime_RegisterProcessHandlerServer) error
	// Listen for updates states. You can use this to sync data with other DB's, for ex. Search / Reports / etc.
	ListenProcessesUpdates(*ListenProcessesUpdatesReq, Runtime_ListenProcessesUpdatesServer) error
}

func RegisterRuntimeServer(s *grpc.Server, srv RuntimeServer) {
	s.RegisterService(&_Runtime_serviceDesc, srv)
}

func _Runtime_GetProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).GetProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/GetProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).GetProcess(ctx, req.(*GetProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_NewProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).NewProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/NewProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).NewProcess(ctx, req.(*NewProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_PutProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).PutProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/PutProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).PutProcess(ctx, req.(*PutProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_UpdateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).UpdateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/UpdateProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).UpdateProcess(ctx, req.(*UpdateProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_LockProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).LockProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/LockProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).LockProcess(ctx, req.(*LockProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_MakeChan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeChanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).MakeChan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/MakeChan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).MakeChan(ctx, req.(*MakeChanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_ListChans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).ListChans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/ListChans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).ListChans(ctx, req.(*ListChansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_CloseChan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseChanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).CloseChan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/CloseChan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).CloseChan(ctx, req.(*CloseChanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_PutType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Type)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).PutType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/PutType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).PutType(ctx, req.(*Type))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_ListTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTypesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).ListTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/ListTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).ListTypes(ctx, req.(*ListTypesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_PutAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessAPI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).PutAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/PutAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).PutAPI(ctx, req.(*ProcessAPI))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_ListAPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).ListAPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/async.Runtime/ListAPIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).ListAPIs(ctx, req.(*ListAPIsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_RegisterProcessHandler_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterProcessHandlerReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServer).RegisterProcessHandler(m, &runtimeRegisterProcessHandlerServer{stream})
}

type Runtime_RegisterProcessHandlerServer interface {
	Send(*LockedProcess) error
	grpc.ServerStream
}

type runtimeRegisterProcessHandlerServer struct {
	grpc.ServerStream
}

func (x *runtimeRegisterProcessHandlerServer) Send(m *LockedProcess) error {
	return x.ServerStream.SendMsg(m)
}

func _Runtime_ListenProcessesUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenProcessesUpdatesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServer).ListenProcessesUpdates(m, &runtimeListenProcessesUpdatesServer{stream})
}

type Runtime_ListenProcessesUpdatesServer interface {
	Send(*ProcessEvent) error
	grpc.ServerStream
}

type runtimeListenProcessesUpdatesServer struct {
	grpc.ServerStream
}

func (x *runtimeListenProcessesUpdatesServer) Send(m *ProcessEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _Runtime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "async.Runtime",
	HandlerType: (*RuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcess",
			Handler:    _Runtime_GetProcess_Handler,
		},
		{
			MethodName: "NewProcess",
			Handler:    _Runtime_NewProcess_Handler,
		},
		{
			MethodName: "PutProcess",
			Handler:    _Runtime_PutProcess_Handler,
		},
		{
			MethodName: "UpdateProcess",
			Handler:    _Runtime_UpdateProcess_Handler,
		},
		{
			MethodName: "LockProcess",
			Handler:    _Runtime_LockProcess_Handler,
		},
		{
			MethodName: "MakeChan",
			Handler:    _Runtime_MakeChan_Handler,
		},
		{
			MethodName: "ListChans",
			Handler:    _Runtime_ListChans_Handler,
		},
		{
			MethodName: "CloseChan",
			Handler:    _Runtime_CloseChan_Handler,
		},
		{
			MethodName: "PutType",
			Handler:    _Runtime_PutType_Handler,
		},
		{
			MethodName: "ListTypes",
			Handler:    _Runtime_ListTypes_Handler,
		},
		{
			MethodName: "PutAPI",
			Handler:    _Runtime_PutAPI_Handler,
		},
		{
			MethodName: "ListAPIs",
			Handler:    _Runtime_ListAPIs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterProcessHandler",
			Handler:       _Runtime_RegisterProcessHandler_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenProcessesUpdates",
			Handler:       _Runtime_ListenProcessesUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}
